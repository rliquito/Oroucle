{"version":3,"sources":["contexts/AccountContext.tsx","components/SpinButton.tsx","actions/instructions.ts","utils/programIds.ts","utils/notifications.tsx","actions/betEnum.ts","utils/borsh.ts","components/ExplorerLink/index.tsx","utils/eventEmitter.ts","components/Settings/index.tsx","actions/decoders.ts","actions/transactions.ts","actions/account.ts","actions/constants.ts","components/DefaultModal/index.tsx","contexts/WalletContext/WalletContext.tsx","contexts/WalletContext/wallet.less","contexts/ModalContext.tsx","contexts/BetTrackerContext.tsx","actions/index.ts","actions/context.tsx","components/Header/Header.tsx","components/ConnectButton.tsx","components/Balance/Balance.tsx","components/BalancePanel/BalancePanel.tsx","actions/state.ts","utils/ids.ts","actions/schema.ts","theme/theme.ts","components/Confetti/index.tsx","components/RouletteWheel/RouletteWheel.tsx","components/BetSelection/BetSelection.tsx","App.tsx","reportWebVitals.ts","index.tsx","contexts/ConnectionContext.tsx","constants/math.ts","utils/utils.ts"],"names":["AccountsContext","React","createContext","pendingCalls","Map","genericCache","pendingMintCalls","mintCache","getMintInfo","connection","pubKey","a","getAccountInfo","info","Error","data","Buffer","from","deserializeMint","TokenAccountParser","length","buffer","deserializeAccount","pubkey","account","keyToAccountParser","cache","emitter","EventEmitter","query","parser","id","PublicKey","address","toBase58","get","then","add","set","obj","isActive","deserialize","registerParser","delete","undefined","Function","isNew","has","raiseCacheUpdated","key","raiseCacheDeleted","byParser","result","keys","push","queryMint","mint","getMint","addMint","UseNativeAccount","useConnection","publicKey","useWallet","useState","nativeAccount","setNativeAccount","updateCache","useCallback","wrapped","WRAPPED_SOL_MINT","owner","amount","u64","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","wrapNativeAccount","useEffect","subId","updateAccount","onAccountChange","removeAccountChangeListener","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","getTokenAccountsByOwner","programId","programIds","token","value","forEach","AccountsProvider","children","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","walletKey","selectUserAccounts","map","filter","accounts","subs","onCache","args","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","span","removeProgramAccountChangeListener","Provider","decode","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","MintLayout","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","SpinButton","onClick","name","restProps","border","borderRadius","borderColor","bgColor","display","height","_hover","fontFamily","textStyle","color","initializeInstruction","rngAccountKey","payerKey","wallet","WalletNotConnectedError","settings","InitializeArgs","serialize","schema","ix","TransactionInstruction","toPublicKey","isSigner","isWritable","SYSVAR_RENT_PUBKEY","SystemProgram","RNG_PROGRAM_ID","initializeHoneypotInstruction","honeypotAccount","vaultAccount","mintAccount","InitializeHoneypotArgs","tickSize","TICK_SIZE","maxBetSize","MAX_BET_SIZE","minimumBankSize","MINIMUM_BANK_SIZE","TOKEN_PROGRAM_ID","initializeGuessAccountInstruction","guessAccount","InitializeGuessAccountArgs","placeGuessesInstruction","tokenAccount","guesses","PlaceGuessesArgs","SYSVAR_CLOCK_PUBKEY","spinInstruction","pythProductKey1","pythPriceKey1","pythProductKey2","pythPriceKey2","pythProductKey3","pythPriceKey3","SpinArgs","tolerance","BN","SYSVAR_INSTRUCTIONS_PUBKEY","tryCancelInstruction","TryCancelArgs","associatedToken","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","bpf_upgrade_loader","BPF_UPGRADE_LOADER_ID","system","SYSTEM","memo","MEMO_ID","notify","message","description","txid","type","placement","notification","style","opacity","backgroundColor","BET_TO_IDX","Zero","DoubleZero","R1","B2","R3","B4","R5","B6","R7","B8","R9","B10","B11","R12","B13","R14","B15","R16","B17","R18","R19","B20","R21","B22","R23","B24","R25","B26","R27","B28","B29","R30","B31","R32","B33","R34","B35","R36","Red","Black","Even","Odd","Col1","Col2","Col3","Dozen1","Dozen2","Dozen3","Low","High","BET_TO_NUMBER","NUMBER_TO_COLOR","BinaryReader","prototype","readPubkey","array","this","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","toBuffer","readPubkeyAsString","base58","encode","writePubkeyAsString","ExplorerLink","props","code","href","target","title","Text","shortenAddress","CacheUpdateEvent","CacheDeleteEvent","MarketUpdateEvent","ids","Emitter","callback","on","removeListener","emit","Settings","additionalSettings","connected","disconnect","useConnectionConfig","endpoint","setEndpoint","env","setVisible","useWalletModal","open","setModal","useModal","handleConnect","ModalEnum","WALLET","flexDirection","minW","justifyContent","onSelect","width","marginBottom","ENDPOINTS","Option","navigator","clipboard","writeText","danger","catch","decodeRNG","deserializeUnchecked","RNG","getMintAccount","createMintIx","signers","DEVNET_MINT","getMinimumBalanceForRentExemption","mintRent","mintAccountKeypair","Keypair","fromSecretKey","Uint8Array","DEVNET_MINT_KEYPAIR","DEVNET_MINT_AUTHORITY","createMintFromAccount","DECIMALS","Conn","sendTransactionWithRetry","MAINNET_MINT","mintChips","size","Token","findProgramAddress","traderHasChipAccount","createATAIx","console","log","createAssociatedTokenAccountInstruction","mintIx","createMintToInstruction","initializeHoneypot","entrypoint","honeypotIx","toArray","honeypotKey","vaultKey","toNumber","sample","ctx","betTrackerCtx","createIx","bets","Object","entries","bet","RouletteGuess","guess","hasChipAccount","hasGuessAccount","createGuessAccountIx","tryCancelIx","sampleIx","transferIx","transfer","fromPubkey","toPubkey","feePayer","response","spinIx","DEVNET_SOL_PRODUCT_ORACLE","DEVNET_SOL_PRICE_ORACLE","DEVNET_BTC_PRODUCT_ORACLE","DEVNET_BTC_PRICE_ORACLE","DEVNET_ETH_PRODUCT_ORACLE","DEVNET_ETH_PRICE_ORACLE","MAINNET_SOL_PRODUCT_ORACLE","MAINNET_SOL_PRICE_ORACLE","MAINNET_BTC_PRODUCT_ORACLE","MAINNET_BTC_PRICE_ORACLE","MAINNET_ETH_PRODUCT_ORACLE","MAINNET_ETH_PRICE_ORACLE","updateSample","instructions","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","decimals","createAccount","newAccountPubkey","space","createInitMintInstruction","DefaultModal","bodyStyle","closeIcon","rest","background","alignItems","footer","WalletModalContext","useContext","WalletModal","wallets","selected","select","visible","setShowWallets","close","onCancel","fontWeight","fontSize","icon","alt","src","marginRight","float","textAlign","WalletModalProvider","setConnected","keyToDisplay","substring","WalletProvider","useMemo","getPhantomWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","onError","error","autoConnect","ModalContext","removeModal","context","BetTrackerContext","useBetTracker","BetTrackerProvider","setState","locked","setLocked","inc","setInc","totalSize","setTotalSize","winningBets","setWinningBets","resolved","setResolved","chips","setChips","loaded","setLoaded","grayscale","setGrayscale","lock","unlock","increment","cls","currTotal","maxSize","Math","min","decrement","updateInc","i","clear","updateBetResults","defaultContext","currentSample","currentRawSample","currentSlot","initialized","convertedSamples","rawSamples","duplicated","generate","Promise","values","RNGContext","RNGProvider","RNGKey","newState","RNGAccount","version","modn","slot","useRNG","getMintString","mintString","maxChips","remainder","disabled","Header","honeypotButton","setHoneypotButton","houseBalance","setHouseBalance","getHoneypot","getHouseBalance","e","handleChange","marginLeft","v","pow","isConnected","mr","onClickConnect","onClickChange","ConnectButton","isAttached","Balance","cryptoAmount","borderLeftRadius","boxShadow","flexGrow","align","ml","BalancePanel","getChips","chipTokenAccount","marginTop","floor","Honeypot","honeypotBumpSeed","vaultBumpSeed","maxAmount","owedAmount","instruction","SampleArgs","WithdrawFromHoneypotArgs","amountToWithdraw","PubKeysInternedMap","kind","fields","theme","extendTheme","initialColorMode","useSystemColorMode","fonts","heading","body","time","textStyles","lineHeight","emphasis","accent","regular","small","caption","table","timer","colors","brand","gray","blue","teal","green","red","purple","ConfettiContext","ConfettiProvider","canvasRef","useRef","confettiRef","dropConfetti","won","current","visibility","particleCount","spread","origin","y","finally","confetti","create","resize","useWorker","ref","position","zIndex","top","left","useConfetti","rouletteState","list","radius","spinning","RouletteWheel","rngCtx","confettiCtx","surprise","setSurprise","startIdx","setStartIdx","received","responseState","setResponseState","renderSector","start","arc","canvas","document","getElementById","getContext","x","startAngle","endAngle","beginPath","lineWidth","strokeStyle","stroke","renderText","index","text","angle","save","font","fillStyle","x_offset","cos","y_offset","sin","translate","rotate","fillText","measureText","restore","getColor","parseInt","renderWheel","clearRect","numOptions","arcSize","PI","counter","fill","nextIdx","reduce","b","winnings","wonBet","r","setTimeout","region","Path2D","moveTo","lineTo","closePath","drawTriangle","spin","formatCell","elem","querySelector","newStyle","getComputedStyle","rgb","match","className","onContextMenu","preventDefault","maxH","minH","w","toString","formatSideCell","pct","minWidth","minHeight","h","writingMode","BetSelection","App","setValue","mt","Group","onChange","alignContent","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","config","ChainId","Devnet","DEFAULT","ConnectionContext","Connection","tokens","tokenMap","ConnectionProvider","useLocalStorageState","find","end","setTokens","setTokenMap","TokenListProvider","resolve","container","excludeByTag","filterByChainId","MainnetBeta","getList","knownMints","item","onSlotChange","removeSlotChangeListener","SequenceType","getErrorForTransaction","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","m","regex","exec","lastIndex","sendTransactionsWithManualRetry","stopPoint","tries","lastInstructionsLength","toRemoveSigners","instr","filteredSigners","_","slice","sendTransactions","StopOnFailure","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","unsignedTxns","getRecentBlockhash","transaction","Transaction","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","reason","all","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","confirmation","err","beforeSend","getUnixTs","Date","getTime","timeout","startTime","done","sleep","simulateResult","simulateTransaction","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","encoding","_rpcRequest","res","queryStatus","status","confirmations","reject","onSignature","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","TEN","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","defaultState","storedState","localStorage","getItem","parse","setLocalStorageState","removeItem","setItem","chars","chunks","Array","apply","ceil","currency","ms"],"mappings":"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","file":"static/js/main.6bf29dc5.chunk.js","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useConnection } from './ConnectionContext';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { AccountLayout, MintInfo, MintLayout, u64 } from '@solana/spl-token';\nimport { TokenAccount } from '../models';\nimport { chunks } from '../utils/utils';\nimport { EventEmitter } from '../utils/eventEmitter';\nimport { StringPublicKey, WRAPPED_SOL_MINT } from '../utils/ids';\nimport { programIds } from '../utils/programIds';\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\n\nexport interface ParsedAccountBase {\n  pubkey: StringPublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unknown\n}\n\nexport type AccountParser = (\n  pubkey: StringPublicKey,\n  data: AccountInfo<Buffer>,\n) => ParsedAccountBase | undefined;\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error('Failed to find mint account');\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport const MintParser = (pubKey: string, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  // Sometimes a wrapped sol account gets closed, goes to 0 length,\n  // triggers an update over wss which triggers this guy to get called\n  // since your UI already logged that pubkey as a token account. Check for length.\n  if (info.data.length > 0) {\n    const buffer = Buffer.from(info.data);\n    const data = deserializeAccount(buffer);\n\n    const details = {\n      pubkey: pubKey,\n      account: {\n        ...info,\n      },\n      info: data,\n    } as TokenAccount;\n\n    return details;\n  }\n};\n\nexport const GenericAccountParser = (\n  pubKey: string,\n  info: AccountInfo<Buffer>,\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  emitter: new EventEmitter(),\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser,\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    // TODO: refactor to use multiple accounts query with flush like behavior\n    query = connection.getAccountInfo(id).then(data => {\n      if (!data) {\n        throw new Error('Account not found');\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (\n    id: PublicKey | string,\n    obj: AccountInfo<Buffer>,\n    parser?: AccountParser,\n    isActive?: boolean | undefined | ((parsed: any) => boolean),\n  ) => {\n    const address = typeof id === 'string' ? id : id?.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        'Deserializer needs to be registered or passed as a parameter',\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(address, obj);\n    if (!account) {\n      return;\n    }\n\n    if (isActive === undefined) isActive = true;\n    else if (isActive instanceof Function) isActive = isActive(account);\n\n    const isNew = !genericCache.has(address);\n\n    genericCache.set(address, account);\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize, isActive);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  delete: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    if (genericCache.get(key)) {\n      genericCache.delete(key);\n      cache.emitter.raiseCacheDeleted(key);\n      return true;\n    }\n    return false;\n  },\n\n  byParser: (parser: AccountParser) => {\n    const result: string[] = [];\n    for (const id of keyToAccountParser.keys()) {\n      if (keyToAccountParser.get(id) === parser) {\n        result.push(id);\n      }\n    }\n\n    return result;\n  },\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\n    if (pubkey) {\n      const address = typeof pubkey === 'string' ? pubkey : pubkey?.toBase58();\n      keyToAccountParser.set(address, parser);\n    }\n\n    return pubkey;\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === 'string') {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then(data => {\n      pendingMintCalls.delete(address);\n\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingMintCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== 'string') {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    const id = pubKey.toBase58();\n    mintCache.set(id, mint);\n    return mint;\n  },\n};\n\nexport const useAccountsContext = () => {\n  const context = useContext(AccountsContext);\n\n  return context;\n};\n\nfunction wrapNativeAccount(\n  pubkey: string,\n  account?: AccountInfo<Buffer>,\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  const key = new PublicKey(pubkey);\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      address: key,\n      mint: WRAPPED_SOL_MINT,\n      owner: key,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean,\n) => {\n  for (const account of genericCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n\n  const updateCache = useCallback(\n    account => {\n      if (publicKey) {\n        const wrapped = wrapNativeAccount(publicKey.toBase58(), account);\n        if (wrapped !== undefined) {\n          const id = publicKey.toBase58();\n          cache.registerParser(id, TokenAccountParser);\n          genericCache.set(id, wrapped as TokenAccount);\n          cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser, true);\n        }\n      }\n    },\n    [publicKey],\n  );\n\n  useEffect(() => {\n    let subId = 0;\n    const updateAccount = (account: AccountInfo<Buffer> | null) => {\n      if (account) {\n        updateCache(account);\n        setNativeAccount(account);\n      }\n    };\n\n    (async () => {\n      if (!connection || !publicKey) {\n        return;\n      }\n\n      try {\n        const account = await connection.getAccountInfo(publicKey);\n        updateAccount(account);\n      } catch {\n        return;\n      }\n\n      subId = connection.onAccountChange(publicKey, updateAccount);\n    })();\n\n    return () => {\n      if (subId) {\n        connection.removeAccountChangeListener(subId);\n      }\n    };\n  }, [setNativeAccount, publicKey, connection, updateCache]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey,\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are updated via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n\n  accounts.value.forEach(info => {\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\n  });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { publicKey } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const walletKey = publicKey?.toBase58();\n\n  const selectUserAccounts = useCallback(() => {\n    return cache\n      .byParser(TokenAccountParser)\n      .map(id => cache.get(id))\n      .filter(a => a && a.info.owner.toBase58() === walletKey)\n      .map(a => a as TokenAccount);\n  }, [walletKey]);\n\n  useEffect(() => {\n    const accounts = selectUserAccounts().filter(\n      a => a !== undefined,\n    ) as TokenAccount[];\n    setUserAccounts(accounts);\n  }, [nativeAccount, tokenAccounts, selectUserAccounts]);\n\n  useEffect(() => {\n    const subs: number[] = [];\n    cache.emitter.onCache(args => {\n      if (args.isNew && args.isActive) {\n        let id = args.id;\n        let deserialize = args.parser;\n        connection.onAccountChange(new PublicKey(id), info => {\n          cache.add(id, info, deserialize);\n        });\n      }\n    });\n\n    return () => {\n      subs.forEach(id => connection.removeAccountChangeListener(id));\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter.\n      // this should use only filter syntax to only get accounts that are owned by user\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        info => {\n          // TODO: fix type in web3.js\n          const id = info.accountId as unknown as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\n              cache.add(id, info.accountInfo, TokenAccountParser);\n              setTokenAccounts(selectUserAccounts());\n            }\n          }\n        },\n        'singleGossip',\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n      };\n    }\n  }, [connection, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === 'string' ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .query(connection, id, MintParser)\n      .then(acc => setMint(acc.info as any))\n      .catch(err => console.log(err));\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === id) {\n        cache\n          .query(connection, id, MintParser)\n          .then(mint => setMint(mint.info as any));\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache\n          .query(connection, key, TokenAccountParser)\n          .catch(err => console.log(err));\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = cache.emitter.onCache(e => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\n// TODO: expose in spl package\nexport const deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nexport const deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import React from \"react\";\nimport { Button, ButtonProps, Text } from \"@chakra-ui/react\";\nimport { useConnection } from '../contexts';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nexport type SpinButtonProps = ButtonProps & {\n    onClick?: () => void;\n};\n\nexport const SpinButton: React.FC<SpinButtonProps> = ({\n    onClick,\n    name,\n    ...restProps\n}) => {\n    return (\n        <Button\n            border=\"1px\"\n            borderRadius=\"5px\"\n            borderColor=\"green.400\"\n            bgColor=\"transparent\"\n            display=\"inline-block\"\n            height=\"42px\"\n            _hover={{ bgColor: \"transparent\", borderColor: \"green.300\" }}\n            {...restProps}\n            onClick={onClick}\n            fontFamily=\"@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n            'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n            'Noto Color Emoji'\"\n        >\n            <Text textStyle=\"emphasis\" color=\"green.400\">\n                {name}\n            </Text>\n        </Button>\n    );\n};\n\nexport default SpinButton;\n","import {\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport BN from \"bn.js\";\nimport { serialize } from \"borsh\";\nimport {\n  InitializeArgs,\n  InitializeHoneypotArgs,\n  InitializeGuessAccountArgs,\n  PlaceGuessesArgs,\n  SpinArgs,\n  TryCancelArgs,\n  RouletteGuess,\n  SampleArgs,\n  WithdrawFromHoneypotArgs,\n} from \"./state\";\nimport { toPublicKey, StringPublicKey, TOKEN_PROGRAM_ID } from \"../utils\";\nimport { schema } from \"./schema\";\nimport {\n  MAX_BET_SIZE,\n  MINIMUM_BANK_SIZE,\n  RNG_PROGRAM_ID,\n  TICK_SIZE,\n} from \"./constants\";\n\nexport const initializeInstruction = async (\n  rngAccountKey: StringPublicKey,\n  payerKey: StringPublicKey,\n  wallet: any\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new InitializeArgs();\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(rngAccountKey),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(payerKey),\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n\nexport const sampleInstruction = async (\n  rngAccountKey: StringPublicKey,\n  pythProductKey1: StringPublicKey,\n  pythPriceKey1: StringPublicKey,\n  pythProductKey2: StringPublicKey,\n  pythPriceKey2: StringPublicKey,\n  pythProductKey3: StringPublicKey,\n  pythPriceKey3: StringPublicKey,\n  wallet: any\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new SampleArgs({ tolerance: new BN(10) });\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(rngAccountKey),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(SYSVAR_CLOCK_PUBKEY),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythProductKey1),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythPriceKey1),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythProductKey2),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythPriceKey2),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythProductKey3),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythPriceKey3),\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n\nexport const initializeHoneypotInstruction = async (\n  honeypotAccount: StringPublicKey,\n  vaultAccount: StringPublicKey,\n  mintAccount: StringPublicKey,\n  wallet: any\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new InitializeHoneypotArgs({\n    tickSize: TICK_SIZE,\n    maxBetSize: MAX_BET_SIZE,\n    minimumBankSize: MINIMUM_BANK_SIZE,\n  });\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(honeypotAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(mintAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(vaultAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: wallet.publicKey,\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n\nexport const withdrawFromHoneypotInstruction = async (\n  honeypotAccount: StringPublicKey,\n  vaultAccount: StringPublicKey,\n  tokenAccount: StringPublicKey,\n  mintAccount: StringPublicKey,\n  wallet: any,\n  amount: BN\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new WithdrawFromHoneypotArgs({\n    amountToWithdraw: amount,\n  });\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(honeypotAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(vaultAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(mintAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(wallet.publicKey),\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(tokenAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n\nexport const initializeGuessAccountInstruction = async (\n  mintAccount: StringPublicKey,\n  honeypotAccount: StringPublicKey,\n  vaultAccount: StringPublicKey,\n  guessAccount: StringPublicKey,\n  wallet: any\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new InitializeGuessAccountArgs();\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(wallet.publicKey),\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(mintAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(honeypotAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(vaultAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(guessAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n\nexport const placeGuessesInstruction = async (\n  mintAccount: StringPublicKey,\n  honeypotAccount: StringPublicKey,\n  vaultAccount: StringPublicKey,\n  guessAccount: StringPublicKey,\n  tokenAccount: StringPublicKey,\n  wallet: any,\n  guesses: RouletteGuess[]\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new PlaceGuessesArgs({ guesses: guesses });\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(wallet.publicKey),\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(tokenAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(mintAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(honeypotAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(vaultAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(guessAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: SYSVAR_CLOCK_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n\nexport const spinInstruction = async (\n  rngAccountKey: StringPublicKey,\n  honeypotAccount: StringPublicKey,\n  vaultAccount: StringPublicKey,\n  mintAccount: StringPublicKey,\n  guessAccount: StringPublicKey,\n  tokenAccount: StringPublicKey,\n  pythProductKey1: StringPublicKey,\n  pythPriceKey1: StringPublicKey,\n  pythProductKey2: StringPublicKey,\n  pythPriceKey2: StringPublicKey,\n  pythProductKey3: StringPublicKey,\n  pythPriceKey3: StringPublicKey,\n  wallet: any\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new SpinArgs({ tolerance: new BN(10) });\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(rngAccountKey),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(guessAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(wallet.publicKey),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(tokenAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(mintAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(honeypotAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(vaultAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(TOKEN_PROGRAM_ID),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(SYSVAR_INSTRUCTIONS_PUBKEY),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(SYSVAR_CLOCK_PUBKEY),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythProductKey1),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythPriceKey1),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythProductKey2),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythPriceKey2),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythProductKey3),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(pythPriceKey3),\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n\nexport const tryCancelInstruction = async (\n  honeypotAccount: StringPublicKey,\n  vaultAccount: StringPublicKey,\n  mintAccount: StringPublicKey,\n  guessAccount: StringPublicKey,\n  tokenAccount: StringPublicKey,\n  wallet: any,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let settings = new TryCancelArgs();\n  const data = Buffer.from(serialize(schema, settings));\n  return {\n    ix: [\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: toPublicKey(guessAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(wallet.publicKey),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(tokenAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(mintAccount),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: toPublicKey(honeypotAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(vaultAccount),\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: toPublicKey(TOKEN_PROGRAM_ID),\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: toPublicKey(RNG_PROGRAM_ID),\n        data,\n      }),\n    ],\n  };\n};\n","import {\n  TOKEN_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  BPF_UPGRADE_LOADER_ID,\n  SYSTEM,\n  MEMO_ID,\n} from './ids';\n\nexport const setProgramIds = async () => {};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    associatedToken: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: BPF_UPGRADE_LOADER_ID,\n    system: SYSTEM,\n    memo: MEMO_ID,\n    // store: STORE,\n  };\n};\n","import React from 'react';\nimport { notification } from 'antd';\n// import Link from '../components/Link';\n\nexport function notify({\n  message = '',\n  description = undefined as any,\n  txid = '',\n  type = 'info',\n  placement = 'bottomLeft',\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: 'black' }}>{message}</span>,\n    description: (\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: 'white',\n    },\n  });\n}\n","export const BET_TO_IDX = {\n  Zero: 0,\n  DoubleZero: 1,\n  R1: 2,\n  B2: 3,\n  R3: 4,\n  B4: 5,\n  R5: 6,\n  B6: 7,\n  R7: 8,\n  B8: 9,\n  R9: 10,\n  B10: 11,\n  B11: 12,\n  R12: 13,\n  B13: 14,\n  R14: 15,\n  B15: 16,\n  R16: 17,\n  B17: 18,\n  R18: 19,\n  R19: 20,\n  B20: 21,\n  R21: 22,\n  B22: 23,\n  R23: 24,\n  B24: 25,\n  R25: 26,\n  B26: 27,\n  R27: 28,\n  B28: 29,\n  B29: 30,\n  R30: 31,\n  B31: 32,\n  R32: 33,\n  B33: 34,\n  R34: 35,\n  B35: 36,\n  R36: 37,\n  Red: 38,\n  Black: 39,\n  Even: 40,\n  Odd: 41,\n  Col1: 42,\n  Col2: 43,\n  Col3: 44,\n  Dozen1: 45,\n  Dozen2: 46,\n  Dozen3: 47,\n  Low: 48,\n  High: 49,\n};\n\nexport const BET_TO_NUMBER = {\n  Zero: 0,\n  R1: 1,\n  B2: 2,\n  R3: 3,\n  B4: 4,\n  R5: 5,\n  B6: 6,\n  R7: 7,\n  B8: 8,\n  R9: 9,\n  B10: 10,\n  B11: 11,\n  R12: 12,\n  B13: 13,\n  R14: 14,\n  B15: 15,\n  R16: 16,\n  B17: 17,\n  R18: 18,\n  R19: 19,\n  B20: 20,\n  R21: 21,\n  B22: 22,\n  R23: 23,\n  B24: 24,\n  R25: 25,\n  B26: 26,\n  R27: 27,\n  B28: 28,\n  B29: 29,\n  R30: 30,\n  B31: 31,\n  R32: 32,\n  B33: 33,\n  R34: 34,\n  B35: 35,\n  R36: 36,\n  DoubleZero: 37,\n};\n\nexport const NUMBER_TO_COLOR = {\n  1: \"R\",\n  2: \"B\",\n  3: \"R\",\n  4: \"B\",\n  5: \"R\",\n  6: \"B\",\n  7: \"R\",\n  8: \"B\",\n  9: \"R\",\n  10: \"B\",\n  11: \"B\",\n  12: \"R\",\n  13: \"B\",\n  14: \"R\",\n  15: \"B\",\n  16: \"R\",\n  17: \"B\",\n  18: \"R\",\n  19: \"R\",\n  20: \"B\",\n  21: \"R\",\n  22: \"B\",\n  23: \"R\",\n  24: \"B\",\n  25: \"R\",\n  26: \"B\",\n  27: \"R\",\n  28: \"B\",\n  29: \"B\",\n  30: \"R\",\n  31: \"B\",\n  32: \"R\",\n  33: \"B\",\n  34: \"R\",\n  35: \"B\",\n  36: \"R\",\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\nimport { StringPublicKey } from './ids';\n\nexport const extendBorsh = () => {\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as StringPublicKey;\n  };\n\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: StringPublicKey,\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n};\n\nextendBorsh();\n","import React from 'react';\nimport { Typography } from 'antd';\nimport { shortenAddress } from '../../utils/utils';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const ExplorerLink = (props: {\n  address: string | PublicKey;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n  length?: number;\n}) => {\n  const { type, code } = props;\n\n  const address =\n    typeof props.address === 'string'\n      ? props.address\n      : props.address?.toBase58();\n\n  if (!address) {\n    return null;\n  }\n\n  const length = props.length ?? 9;\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      // eslint-disable-next-line react/jsx-no-target-blank\n      target=\"_blank\"\n      title={address}\n      style={props.style}\n    >\n      {code ? (\n        <Typography.Text style={props.style} code>\n          {shortenAddress(address, length)}\n        </Typography.Text>\n      ) : (\n        shortenAddress(address, length)\n      )}\n    </a>\n  );\n};\n","import { EventEmitter as Emitter } from 'eventemitter3';\n\nexport class CacheUpdateEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  parser: any;\n  isNew: boolean;\n  isActive: boolean;\n  constructor(id: string, isNew: boolean, parser: any, isActive: boolean) {\n    this.id = id;\n    this.parser = parser;\n    this.isNew = isNew;\n    this.isActive = isActive;\n  }\n}\n\nexport class CacheDeleteEvent {\n  static type = 'CacheUpdate';\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = 'MarketUpdate';\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onCache(callback: (args: CacheUpdateEvent) => void) {\n    this.emitter.on(CacheUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n\n  raiseCacheUpdated(\n    id: string,\n    isNew: boolean,\n    parser: any,\n    isActive: boolean,\n  ) {\n    this.emitter.emit(\n      CacheUpdateEvent.type,\n      new CacheUpdateEvent(id, isNew, parser, isActive),\n    );\n  }\n\n  raiseCacheDeleted(id: string) {\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\n  }\n}\n","import React, { useCallback } from \"react\";\nimport { Button, Select } from \"antd\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { ENDPOINTS, useConnectionConfig } from \"../../contexts\";\nimport { notify, shortenAddress } from \"../../utils\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { ModalEnum, useModal, useWalletModal } from \"../../contexts\";\nimport { Flex } from \"@chakra-ui/layout\";\n\nexport const Settings = ({\n  additionalSettings,\n}: {\n  additionalSettings?: JSX.Element;\n}) => {\n  const { connected, disconnect, publicKey } = useWallet();\n  const { endpoint, setEndpoint, env } = useConnectionConfig();\n  const { setVisible } = useWalletModal();\n  const open = useCallback(() => setVisible(true), [setVisible]);\n  const { setModal } = useModal();\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n\n  return (\n    <>\n      <Flex flexDirection=\"column\" minW=\"100%\" justifyContent=\"flex-end\">\n        <Flex>\n          {!connected && (\n            <>\n              <Select\n                onSelect={setEndpoint}\n                value={endpoint}\n                style={{ width: \"100%\", marginBottom: 5 }}\n              >\n                {ENDPOINTS.map(({ name, endpoint }) => (\n                  <Select.Option value={endpoint} key={endpoint}>\n                    {name}\n                  </Select.Option>\n                ))}\n              </Select>\n              <Button\n                type=\"primary\"\n                onClick={handleConnect}\n                style={{ marginBottom: 5 }}\n              >\n                Connect\n              </Button>\n            </>\n          )}\n        </Flex>\n        <Flex>\n          {connected && (\n            <>\n              <Flex>\n                {publicKey && (\n                  <Button\n                    style={{ marginBottom: 5 }}\n                    onClick={async () => {\n                      if (publicKey) {\n                        await navigator.clipboard.writeText(\n                          publicKey.toBase58()\n                        );\n                        notify({\n                          message: \"Wallet update\",\n                          description: \"Address copied to clipboard\",\n                        });\n                      }\n                    }}\n                  >\n                    <CopyOutlined />\n                    {shortenAddress(publicKey.toBase58())}\n                  </Button>\n                )}\n              </Flex>\n              <Button onClick={open} style={{ marginBottom: 5 }}>\n                Change Wallet\n              </Button>\n              <Button\n                type=\"primary\"\n                danger={true}\n                onClick={() => disconnect().catch()}\n                style={{ marginBottom: 5 }}\n              >\n                Disconnect ({env})\n              </Button>\n            </>\n          )}\n        </Flex>\n        {additionalSettings}\n      </Flex>\n    </>\n  );\n};\n","import { deserializeUnchecked } from 'borsh';\nimport {\n  Honeypot,\n  RNG,\n  RouletteGuess,\n} from './state'\n\nimport { schema } from './schema'\n\nexport const decodeRNG = (buffer: Buffer) => {\n  return deserializeUnchecked(schema, RNG, buffer) as RNG;\n};\n\nexport const decodeHoneypot = (buffer: Buffer) => {\n  return deserializeUnchecked(schema, Honeypot, buffer) as Honeypot;\n};\n\nexport const decodeRouletteGuess = (buffer: Buffer) => {\n  return deserializeUnchecked(schema, RouletteGuess, buffer) as RouletteGuess;\n};","import {\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n  TransferParams,\n} from \"@solana/web3.js\";\nimport {\n  Connection as Conn,\n} from \"../contexts\";\nimport {\n  createAssociatedTokenAccountInstruction,\n  createMintFromAccount,\n} from \"./account\";\nimport {\n  initializeInstruction,\n  placeGuessesInstruction,\n  spinInstruction,\n  tryCancelInstruction,\n  initializeHoneypotInstruction,\n  initializeGuessAccountInstruction,\n} from \"./instructions\";\nimport {\n  notify,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  toPublicKey,\n} from \"../utils\";\nimport {\n  DECIMALS,\n  RNG_PROGRAM_ID,\n  DEVNET_SOL_PRICE_ORACLE,\n  DEVNET_SOL_PRODUCT_ORACLE,\n  DEVNET_BTC_PRODUCT_ORACLE,\n  DEVNET_BTC_PRICE_ORACLE,\n  DEVNET_ETH_PRODUCT_ORACLE,\n  DEVNET_ETH_PRICE_ORACLE,\n  DEVNET_MINT,\n  MAINNET_SOL_PRICE_ORACLE,\n  MAINNET_SOL_PRODUCT_ORACLE,\n  MAINNET_BTC_PRODUCT_ORACLE,\n  MAINNET_BTC_PRICE_ORACLE,\n  MAINNET_ETH_PRODUCT_ORACLE,\n  MAINNET_ETH_PRICE_ORACLE,\n  MAINNET_MINT,\n  DEVNET_MINT_KEYPAIR,\n  DEVNET_MINT_AUTHORITY,\n  TICK_SIZE,\n  MAX_BET_SIZE,\n  MINIMUM_BANK_SIZE,\n} from \"./constants\";\nimport { RouletteGuess } from \"./state\";\nimport { BET_TO_IDX } from \"./betEnum\";\nimport BN from \"bn.js\";\nimport { MintLayout, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst getMintAccount = async (\n  connection: Connection,\n  wallet: any,\n  env: string,\n  createMintIx: TransactionInstruction[],\n  signers: Keypair[]\n) => {\n  let mintAccount;\n  if (env === \"devnet\") {\n    mintAccount = DEVNET_MINT;\n    if (!(await connection.getAccountInfo(mintAccount))) {\n      const mintRent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      );\n      const mintAccountKeypair = Keypair.fromSecretKey(\n        new Uint8Array(DEVNET_MINT_KEYPAIR)\n      );\n      const mintAuthority = Keypair.fromSecretKey(\n        new Uint8Array(DEVNET_MINT_AUTHORITY)\n      );\n      createMintFromAccount(\n        createMintIx,\n        wallet.publicKey,\n        mintRent,\n        DECIMALS,\n        mintAuthority.publicKey,\n        mintAuthority.publicKey,\n        mintAccountKeypair\n      );\n      signers.push(mintAccountKeypair);\n      const response = await Conn.sendTransactionWithRetry(\n        connection,\n        wallet,\n        [...createMintIx],\n        signers,\n        \"max\"\n      );\n      if (!response) {\n        return null;\n      }\n    }\n  } else {\n    mintAccount = MAINNET_MINT;\n  }\n  return mintAccount;\n};\n\nexport const mintChips = async (\n  connection: Connection,\n  wallet: any,\n  env: string,\n  size: number,\n) => {\n  if (env === \"devnet\") {\n    let signers: Keypair[] = [];\n    let ix: TransactionInstruction[] = [];\n    const mintAccount = await getMintAccount(\n      connection,\n      wallet,\n      env,\n      ix,\n      signers\n    );\n    const mintAuthority = Keypair.fromSecretKey(\n      new Uint8Array(DEVNET_MINT_AUTHORITY)\n    );\n    const token = new Token(\n      connection,\n      mintAccount,\n      TOKEN_PROGRAM_ID,\n      mintAuthority\n    );\n    const tokenAccount = (\n      await PublicKey.findProgramAddress(\n        [\n          wallet.publicKey.toBuffer(),\n          TOKEN_PROGRAM_ID.toBuffer(),\n          mintAccount.toBuffer(),\n        ],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n\n    const traderHasChipAccount = await connection.getAccountInfo(\n      new PublicKey(tokenAccount)\n    );\n\n    let createATAIx: TransactionInstruction[] = [];\n    if (!traderHasChipAccount) {\n      console.log(\"Creating payer AssociatedTokenAccount...\");\n      createAssociatedTokenAccountInstruction(\n        createATAIx,\n        tokenAccount,\n        wallet.publicKey,\n        wallet.publicKey,\n        mintAccount\n      );\n    }\n    let mintIx = Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mintAccount,\n      tokenAccount,\n      mintAuthority.publicKey,\n      [mintAuthority],\n      size\n    );\n    signers.push(mintAuthority);\n    await Conn.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [...createATAIx, mintIx],\n      signers,\n      \"max\"\n    );\n  }\n};\n\nexport const initializeHoneypot = async (\n  connection,\n  wallet: any,\n  env: string\n) => {\n  console.log(connection.entrypoint);\n  if (!wallet.publicKey) {\n    notify({ message: \"Wallet not connected!\" });\n    return false;\n  }\n  console.log(wallet.publicKey);\n  let signers: Keypair[] = [];\n  let honeypotIx: TransactionInstruction[] = [];\n  let createMintIx: TransactionInstruction[] = [];\n  let mintIx: TransactionInstruction[] = [];\n  let mintAccount = await getMintAccount(\n    connection,\n    wallet,\n    env,\n    createMintIx,\n    signers\n  );\n  if (!mintAccount) {\n    return false;\n  }\n  let [honeypotKey, _honeypotBumpSeed] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"honeypot\"),\n      mintAccount.toBuffer(),\n      new Uint8Array(TICK_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MAX_BET_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MINIMUM_BANK_SIZE.toArray(\"le\", 8)),\n    ],\n    RNG_PROGRAM_ID\n  );\n  let [vaultKey, _vaultBumpSeed] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"vault\"),\n      mintAccount.toBuffer(),\n      new Uint8Array(TICK_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MAX_BET_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MINIMUM_BANK_SIZE.toArray(\"le\", 8)),\n    ],\n    RNG_PROGRAM_ID\n  );\n\n  let res = await connection.getAccountInfo(honeypotKey);\n  if (!res) {\n    let { ix } = await initializeHoneypotInstruction(\n      honeypotKey.toBase58(),\n      vaultKey.toBase58(),\n      mintAccount.toBase58(),\n      wallet\n    );\n    honeypotIx = ix;\n    if (env === \"devnet\") {\n      const mintAuthority = Keypair.fromSecretKey(\n        new Uint8Array(DEVNET_MINT_AUTHORITY)\n      );\n      mintIx = [\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mintAccount,\n          vaultKey,\n          mintAuthority.publicKey,\n          [mintAuthority],\n          2 * MINIMUM_BANK_SIZE.toNumber()\n        ),\n      ];\n      signers.push(mintAuthority);\n    }\n    const response = await Conn.sendTransactionWithRetry(\n      connection,\n      wallet,\n      [...honeypotIx, ...mintIx],\n      signers,\n      \"max\"\n    );\n    if (!response) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const sample = async (\n  connection: Connection,\n  wallet: any,\n  env: string,\n  ctx: any,\n  betTrackerCtx: any\n) => {\n  if (!wallet.publicKey) {\n    notify({ message: \"Wallet not connected!\" });\n    return false;\n  }\n  console.log(wallet.publicKey);\n  let signers: Keypair[] = [];\n  let createMintIx: TransactionInstruction[] = [];\n  let mintAccount = await getMintAccount(\n    connection,\n    wallet,\n    env,\n    createMintIx,\n    signers\n  );\n  if (!mintAccount) {\n    notify({ message: \"Failed to create mint account\" });\n    return false;\n  }\n  let [rngAccountKey, _] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"random\"),\n      toPublicKey(wallet.publicKey).toBuffer(),\n      RNG_PROGRAM_ID.toBuffer(),\n    ],\n    RNG_PROGRAM_ID\n  );\n  let createIx: TransactionInstruction[] = [];\n  if (!rngAccountKey) {\n    notify({ message: \"RNG account invalid\" });\n    return false;\n  }\n  let res = await connection.getAccountInfo(rngAccountKey);\n  if (!res) {\n    let { ix } = await initializeInstruction(\n      rngAccountKey.toBase58(),\n      wallet.publicKey,\n      wallet\n    );\n    createIx = ix;\n  }\n  let bets: RouletteGuess[] = [];\n  for (let [bet, amount] of Object.entries(betTrackerCtx.state)) {\n    console.log(BET_TO_IDX[bet], amount);\n    bets.push(\n      new RouletteGuess({\n        guess: BET_TO_IDX[bet],\n        amount: new BN(amount as number),\n      })\n    );\n  }\n  const tokenAccount = (\n    await PublicKey.findProgramAddress(\n      [\n        wallet.publicKey.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        mintAccount.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n\n  const hasChipAccount = await connection.getAccountInfo(\n    new PublicKey(tokenAccount)\n  );\n\n  let createATAIx: TransactionInstruction[] = [];\n\n  if (!hasChipAccount) {\n    console.log(\"Creating payer AssociatedTokenAccount...\");\n    createAssociatedTokenAccountInstruction(\n      createATAIx,\n      tokenAccount,\n      wallet.publicKey,\n      wallet.publicKey,\n      mintAccount\n    );\n  }\n\n  let honeypotKey = (await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"honeypot\"),\n      mintAccount.toBuffer(),\n      new Uint8Array(TICK_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MAX_BET_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MINIMUM_BANK_SIZE.toArray(\"le\", 8)),\n    ],\n    RNG_PROGRAM_ID\n  ))[0];\n  let vaultKey = (await PublicKey.findProgramAddress(\n    [\n      Buffer.from(\"vault\"),\n      mintAccount.toBuffer(),\n      new Uint8Array(TICK_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MAX_BET_SIZE.toArray(\"le\", 8)),\n      new Uint8Array(MINIMUM_BANK_SIZE.toArray(\"le\", 8)),\n    ],\n    RNG_PROGRAM_ID\n  ))[0];\n\n  console.log(bets);\n  console.log(honeypotKey.toBase58());\n\n  const guessAccount = (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"guess_account\"),\n        wallet.publicKey.toBuffer(),\n        vaultKey.toBuffer(),\n      ],\n      RNG_PROGRAM_ID, \n    )\n  )[0];\n\n  const hasGuessAccount = await connection.getAccountInfo(\n    new PublicKey(guessAccount)\n  );\n\n  let createGuessAccountIx: TransactionInstruction[] = [];\n  if (!hasGuessAccount) {\n    console.log(\"Creating guess account...\");\n    let { ix } = await initializeGuessAccountInstruction(\n      mintAccount.toBase58(),\n      honeypotKey.toBase58(),\n      vaultKey.toBase58(),\n      guessAccount.toBase58(),\n      wallet,\n    );\n    createGuessAccountIx = ix;\n  }\n\n  let tryCancelIx: TransactionInstruction[] = [];\n  {\n    const { ix } = await tryCancelInstruction(\n      honeypotKey.toBase58(),\n      vaultKey.toBase58(),\n      mintAccount.toBase58(),\n      guessAccount.toBase58(),\n      tokenAccount.toBase58(),\n      wallet,\n    );\n    tryCancelIx = ix;\n  }\n\n  let sampleIx: TransactionInstruction[] = [];\n  {\n    const { ix } = await placeGuessesInstruction(\n      mintAccount.toBase58(),\n      honeypotKey.toBase58(),\n      vaultKey.toBase58(),\n      guessAccount.toBase58(),\n      tokenAccount.toBase58(),\n      wallet,\n      bets\n    );\n    sampleIx = ix;\n  }\n\n  let transferIx: TransactionInstruction[] = [\n    SystemProgram.transfer({fromPubkey: wallet.publicKey, lamports: 5046, toPubkey: ctx.feePayer.publicKey})\n  ];\n\n  let response = await Conn.sendTransactionWithRetry(\n    connection,\n    wallet,\n    [...createIx, ...createGuessAccountIx, ...tryCancelIx, ...sampleIx, ...transferIx],\n    signers,\n    \"max\"\n  );\n  \n  if (!response) {\n    return false;\n  }\n\n  let spinIx: TransactionInstruction[] = [];\n  if (env === \"devnet\") {\n    const { ix } = await spinInstruction(\n      rngAccountKey.toBase58(),\n      honeypotKey.toBase58(),\n      vaultKey.toBase58(),\n      mintAccount.toBase58(),\n      guessAccount.toBase58(),\n      tokenAccount.toBase58(),\n      DEVNET_SOL_PRODUCT_ORACLE.toBase58(),\n      DEVNET_SOL_PRICE_ORACLE.toBase58(),\n      DEVNET_BTC_PRODUCT_ORACLE.toBase58(),\n      DEVNET_BTC_PRICE_ORACLE.toBase58(),\n      DEVNET_ETH_PRODUCT_ORACLE.toBase58(),\n      DEVNET_ETH_PRICE_ORACLE.toBase58(),\n      wallet,\n    );\n    spinIx = ix;\n  } else {\n    console.log(\"Mainnet\")\n    const { ix } = await spinInstruction(\n      rngAccountKey.toBase58(),\n      honeypotKey.toBase58(),\n      vaultKey.toBase58(),\n      mintAccount.toBase58(),\n      guessAccount.toBase58(),\n      tokenAccount.toBase58(),\n      MAINNET_SOL_PRODUCT_ORACLE.toBase58(),\n      MAINNET_SOL_PRICE_ORACLE.toBase58(),\n      MAINNET_BTC_PRODUCT_ORACLE.toBase58(),\n      MAINNET_BTC_PRICE_ORACLE.toBase58(),\n      MAINNET_ETH_PRODUCT_ORACLE.toBase58(),\n      MAINNET_ETH_PRICE_ORACLE.toBase58(),\n      wallet,\n    );\n    spinIx = ix;\n  }\n  let transferIx2: TransactionInstruction[] = [\n    SystemProgram.transfer({fromPubkey: ctx.feePayer.publicKey, lamports: 1, toPubkey: ctx.feePayer.publicKey})\n  ];\n  response = await Conn.sendTransactionWithRetry(\n    connection,\n    wallet,\n    [...spinIx],\n    [ctx.feePayer],\n    \"max\",\n    true\n  );\n\n  if (!response) {\n    notify({ message: \"Failed to sample program\" });\n    console.log(response);\n    return false;\n  } else {\n    await ctx.updateSample(rngAccountKey);\n    return true;\n  }\n};\n","import { AccountLayout, MintLayout, Token } from '@solana/spl-token';\nimport {\n  Account,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport {\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  WRAPPED_SOL_MINT,\n} from '../utils/ids';\nimport { programIds } from '../utils/programIds';\nimport { TokenAccount } from '../models/account';\nimport { cache, TokenAccountParser } from '../contexts/AccountContext';\n\nexport function ensureSplAccount(\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  toCheck: TokenAccount,\n  payer: PublicKey,\n  amount: number,\n  signers: Keypair[],\n) {\n  if (!toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  const account = createUninitializedAccount(\n    instructions,\n    payer,\n    amount,\n    signers,\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      WRAPPED_SOL_MINT,\n      account,\n      payer,\n    ),\n  );\n\n  cleanupInstructions.push(\n    Token.createCloseAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      account,\n      payer,\n      payer,\n      [],\n    ),\n  );\n\n  return account;\n}\n\nexport const DEFAULT_TEMP_MEM_SPACE = 65548;\n\nexport function createTempMemoryAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  signers: Keypair[],\n  owner: PublicKey,\n  space = DEFAULT_TEMP_MEM_SPACE,\n) {\n  const account = Keypair.generate();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      // 0 will evict/close account since it cannot pay rent\n      lamports: 0,\n      space: space,\n      programId: owner,\n    }),\n  );\n\n  signers.push(account);\n\n  return account.publicKey;\n}\n\nexport function createUninitializedMint(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  amount: number,\n  signers: Keypair[],\n) {\n  const account = Keypair.generate();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: MintLayout.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n\n  signers.push(account);\n\n  return account.publicKey;\n}\n\nexport function createUninitializedAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  amount: number,\n  signers: Keypair[],\n) {\n  const account = Keypair.generate();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: AccountLayout.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n\n  signers.push(account);\n\n  return account.publicKey;\n}\n\nexport function createAssociatedTokenAccountInstruction(\n  instructions: TransactionInstruction[],\n  associatedTokenAddress: PublicKey,\n  payer: PublicKey,\n  walletAddress: PublicKey,\n  splTokenMintAddress: PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  instructions.push(\n    new TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    }),\n  );\n}\n\nexport function createMint(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  mintRentExempt: number,\n  decimals: number,\n  owner: PublicKey,\n  freezeAuthority: PublicKey,\n  signers: Keypair[],\n) {\n  const account = createUninitializedMint(\n    instructions,\n    payer,\n    mintRentExempt,\n    signers,\n  );\n\n  instructions.push(\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      account,\n      decimals,\n      owner,\n      freezeAuthority,\n    ),\n  );\n\n  return account;\n}\n\nexport function createMintFromAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  amount: number,\n  decimals: number,\n  owner: PublicKey,\n  freezeAuthority: PublicKey,\n  account: Keypair,\n) {\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: MintLayout.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n  instructions.push(\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      account.publicKey,\n      decimals,\n      owner,\n      freezeAuthority,\n    ),\n  );\n  return account;\n}\n\nexport function createTokenAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  accountRentExempt: number,\n  mint: PublicKey,\n  owner: PublicKey,\n  signers: Keypair[],\n) {\n  const account = createUninitializedAccount(\n    instructions,\n    payer,\n    accountRentExempt,\n    signers,\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, mint, account, owner),\n  );\n\n  return account;\n}\n\nexport function ensureWrappedAccount(\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  toCheck: TokenAccount | undefined,\n  payer: PublicKey,\n  amount: number,\n  signers: Keypair[],\n) {\n  if (toCheck && !toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  const TOKEN_PROGRAM_ID = programIds().token;\n  const account = Keypair.generate();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: AccountLayout.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      WRAPPED_SOL_MINT,\n      account.publicKey,\n      payer,\n    ),\n  );\n\n  cleanupInstructions.push(\n    Token.createCloseAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      account.publicKey,\n      payer,\n      payer,\n      [],\n    ),\n  );\n\n  signers.push(account);\n\n  return account.publicKey.toBase58();\n}\n\n// TODO: check if one of to accounts needs to be native sol ... if yes unwrap it ...\nexport function findOrCreateAccountByMint(\n  payer: PublicKey,\n  owner: PublicKey,\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  accountRentExempt: number,\n  mint: PublicKey, // use to identify same type\n  signers: Keypair[],\n  excluded?: Set<string>,\n): PublicKey {\n  const accountToFind = mint.toBase58();\n  const ownerKey = owner.toBase58();\n  const account = cache\n    .byParser(TokenAccountParser)\n    .map(id => cache.get(id))\n    .find(\n      acc =>\n        acc !== undefined &&\n        acc.info.mint.toBase58() === accountToFind &&\n        acc.info.owner.toBase58() === ownerKey &&\n        (excluded === undefined || !excluded.has(acc.pubkey)),\n    );\n  const isWrappedSol = accountToFind === WRAPPED_SOL_MINT.toBase58();\n\n  let toAccount: PublicKey;\n  if (account && !isWrappedSol) {\n    toAccount = new PublicKey(account.pubkey);\n  } else {\n    // creating depositor pool account\n    toAccount = createTokenAccount(\n      instructions,\n      payer,\n      accountRentExempt,\n      mint,\n      owner,\n      signers,\n    );\n\n    if (isWrappedSol) {\n      cleanupInstructions.push(\n        Token.createCloseAccountInstruction(\n          TOKEN_PROGRAM_ID,\n          toAccount,\n          payer,\n          payer,\n          [],\n        ),\n      );\n    }\n  }\n\n  return toAccount;\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nexport const DECIMALS = 6;\nexport const TICK_SIZE = new BN(1000000);\nexport const MAX_BET_SIZE = new BN(100000000);\nexport const MINIMUM_BANK_SIZE = new BN(3500000000);\n\n// export const RNG_PROGRAM_ID = new PublicKey(\"rouQqKK4CKYgozmG8fuLTaAt7Crngw3dxsGnrWteuno\");\nexport const RNG_PROGRAM_ID = new PublicKey(\"9KyXskqJ7bWay7nJ41sd36XFiA1U1D4pWucLkhbm7ca3\");\nexport const DEVNET_SOL_PRODUCT_ORACLE = new PublicKey(\"3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E\");\nexport const DEVNET_SOL_PRICE_ORACLE = new PublicKey(\"J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix\");\nexport const DEVNET_BTC_PRODUCT_ORACLE = new PublicKey(\"3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk\");\nexport const DEVNET_BTC_PRICE_ORACLE = new PublicKey(\"HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J\");\nexport const DEVNET_ETH_PRODUCT_ORACLE = new PublicKey(\"2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu\");\nexport const DEVNET_ETH_PRICE_ORACLE = new PublicKey(\"EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw\");\nexport const DEVNET_MINT = new PublicKey(\"6dsjVxJGGjvvAPT7zkofsuv9cRUGU2vA51CSqVCpTxce\");\nexport const DEVNET_MINT_KEYPAIR = [140, 153, 174, 106, 128, 238, 133, 77, 118, 137, 44, 181, 197, 159, 92, 116, 183, 221, 29, 16, 17, 93, 129, 9, 249, 78, 194, 148, 128, 179, 172, 102, 83, 188, 181, 27, 211, 171, 12, 252, 90, 164, 17, 213, 21, 109, 75, 4, 234, 70, 52, 111, 28, 13, 157, 34, 1, 179, 61, 127, 121, 243, 132, 175];\nexport const DEVNET_MINT_AUTHORITY = [146, 133, 123, 2, 141, 56, 242, 164, 120, 66, 53, 190, 204, 22, 197, 239, 78, 22, 44, 233, 58, 168, 80, 97, 116, 6, 44, 7, 81, 230, 147, 174, 3, 109, 228, 205, 45, 81, 70, 97, 174, 106, 205, 12, 103, 80, 17, 220, 214, 252, 152, 63, 153, 11, 80, 111, 153, 20, 182, 173, 22, 205, 245, 55];\n\nexport const MAINNET_SOL_PRODUCT_ORACLE = new PublicKey(\"ALP8SdU9oARYVLgLR7LrqMNCYBnhtnQz1cj6bwgwQmgj\");\nexport const MAINNET_SOL_PRICE_ORACLE = new PublicKey(\"H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG\");\nexport const MAINNET_BTC_PRODUCT_ORACLE = new PublicKey(\"4aDoSXJ5o3AuvL7QFeR6h44jALQfTmUUCTVGDD6aoJTM\");\nexport const MAINNET_BTC_PRICE_ORACLE = new PublicKey(\"GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU\");\nexport const MAINNET_ETH_PRODUCT_ORACLE = new PublicKey(\"EMkxjGC1CQ7JLiutDbfYb7UKb3zm9SJcUmr1YicBsdpZ\");\nexport const MAINNET_ETH_PRICE_ORACLE = new PublicKey(\"JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB\");\nexport const MAINNET_MINT = new PublicKey(\"8HGyAAB1yoM1ttS7pXjHMa3dukTFGQggnFFH3hJZgzQh\"); // COPE","import React from \"react\";\nimport { Modal } from \"antd\";\n\nimport \"./index.css\";\n\nexport const DefaultModal = (props: any) => {\n  const { children, closeIcon, bodyStyle, style, ...rest } = props;\n\n  return (\n    <Modal\n      style={{ background: \"transparent\", borderRadius: 16 }}\n      bodyStyle={{\n        // boxShadow: '0 0 0 4px rgba(255, 255, 255, 0.51)',\n        borderRadius: 16,\n        background: \"#121212\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        ...bodyStyle,\n      }}\n      footer={null}\n      width={400}\n      {...rest}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import { WalletAdapter, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  useWallet,\n  WalletProvider as BaseWalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n  WalletName,\n} from \"@solana/wallet-adapter-wallets\";\nimport { Button } from \"antd\";\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { notify } from \"../../utils\";\nimport { DefaultModal } from \"../../components\";\n\nimport \"./wallet.less\";\n\nexport interface WalletModalContextState {\n  visible: boolean;\n  setVisible: (open: boolean) => void;\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(\n  {} as WalletModalContextState\n);\n\nexport function useWalletModal(): WalletModalContextState {\n  return useContext(WalletModalContext);\n}\n\nexport const WalletModal: FC = () => {\n  const { wallets, connected, wallet: selected, select } = useWallet();\n  const { visible, setVisible } = useWalletModal();\n  const [showWallets, setShowWallets] = useState(false);\n  const close = useCallback(() => {\n    setVisible(false);\n    setShowWallets(false);\n  }, [setVisible, setShowWallets]);\n\n  return (\n    <DefaultModal visible={visible} onCancel={close}>\n      <h2\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: 20,\n        }}\n      >\n        {selected ? \"Change provider\" : \"\"}\n      </h2>\n      <p style={{ color: \"white\", fontSize: 14 }}>\n        {selected\n          ? \"Choose from the following options:\"\n          : \"You must be signed in to place a bet\"}\n      </p>\n\n      <br />\n      {wallets.map((wallet) => {\n        return (\n          <Button\n            key={wallet.name}\n            size=\"large\"\n            type={wallet === selected ? \"primary\" : \"ghost\"}\n            onClick={() => {\n              select(wallet.name);\n              close();\n            }}\n            icon={\n              <img\n                alt={`${wallet.name}`}\n                width={20}\n                height={20}\n                src={wallet.icon}\n                style={{ marginRight: 30, float: \"left\" }}\n              />\n            }\n            style={{\n              display: \"block\",\n              width: \"100%\",\n              textAlign: \"left\",\n              marginBottom: 8,\n              color: \"white\",\n            }}\n          >\n            {wallet.name}\n          </Button>\n        );\n      })}\n    </DefaultModal>\n  );\n};\n\nexport const WalletModalProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { publicKey } = useWallet();\n  const [connected, setConnected] = useState(!!publicKey);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    if (publicKey) {\n      const base58 = publicKey.toBase58();\n      const keyToDisplay =\n        base58.length > 20\n          ? `${base58.substring(0, 7)}.....${base58.substring(\n              base58.length - 7,\n              base58.length\n            )}`\n          : base58;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    if (!publicKey && connected) {\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    }\n    setConnected(!!publicKey);\n  }, [publicKey, connected, setConnected]);\n\n  return (\n    <WalletModalContext.Provider\n      value={{\n        visible,\n        setVisible,\n      }}\n    >\n      {children}\n      <WalletModal />\n    </WalletModalContext.Provider>\n  );\n};\n\nexport const WalletProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: {\n          // @FIXME: this should be changed for Default, and by each Default storefront\n          clientId:\n            \"BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ\",\n        },\n      }),\n      getLedgerWallet(),\n      getSolongWallet(),\n      getMathWallet(),\n      getSolletWallet(),\n    ],\n    []\n  );\n\n  const onError = useCallback((error: WalletError) => {\n    console.error(error);\n    notify({\n      message: \"Wallet error\",\n      description: error.message,\n    });\n  }, []);\n\n  return (\n    <BaseWalletProvider wallets={wallets} onError={onError} autoConnect>\n      <WalletModalProvider>{children}</WalletModalProvider>\n    </BaseWalletProvider>\n  );\n};\n\nexport type WalletSigner = Pick<\n  WalletAdapter,\n  \"publicKey\" | \"signTransaction\" | \"signAllTransactions\"\n>;\n","export default __webpack_public_path__ + \"static/media/wallet.c746d144.less\";","import React, { useState, useContext, useCallback } from 'react';\n\nimport { WalletModal } from './WalletContext/WalletContext';\n\nexport enum ModalEnum {\n  WALLET = 'wallet',\n}\n\ntype ModalContextProps = {\n  setModal: (modal: ModalEnum | undefined) => void;\n  removeModal: () => void;\n};\n\nexport const ModalContext = React.createContext<ModalContextProps>({\n  setModal: () => null,\n  removeModal: () => null,\n});\n\nexport const ModalProvider: React.FC = ({ children }) => {\n  const [modal, setModal] = useState<ModalEnum | undefined>(undefined);\n\n  const removeModal = useCallback(() => {\n    setModal(undefined);\n  }, [setModal]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        setModal,\n        removeModal,\n      }}\n    >\n      {children}\n      {modal === ModalEnum.WALLET && <WalletModal />}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModal = (): ModalContextProps => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n","import { createContext, FC, ReactNode, useContext, useState } from \"react\";\nimport { BET_TO_NUMBER, MAX_BET_SIZE, NUMBER_TO_COLOR, TICK_SIZE } from \"../actions\";\n\nexport const BetTrackerContext = createContext({});\n\nexport function useBetTracker() {\n  return useContext(BetTrackerContext);\n}\n\nexport const BetTrackerProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const [state, setState] = useState({});\n  const [locked, setLocked] = useState(false);\n  const [inc, setInc] = useState(TICK_SIZE.toNumber());\n  const [totalSize, setTotalSize] = useState(0);\n  const [winningBets, setWinningBets] = useState({});\n  const [resolved, setResolved] = useState(false);\n  const [chips, setChips] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n  const [grayscale, setGrayscale] = useState(\"\");\n\n  const updateInc = (i) => {\n    setInc(i);\n  };\n\n  const updateBetResults = (sample) => {\n    for (const bet in state) {\n      const amount = state[bet];\n      if (bet in BET_TO_NUMBER && BET_TO_NUMBER[bet] === sample) {\n        winningBets[bet] = amount * 36;\n      }\n      if (sample === 0 || sample === 37) {\n        continue;\n      }\n      if (bet === 'Odd' && sample % 2 === 1) {\n        winningBets[bet] = amount * 2;\n      } else if (bet === 'Even' && sample % 2 === 0) {\n        winningBets[bet] = amount * 2;\n      } else if (bet === 'Col1' && sample % 3 === 1) {\n        winningBets[bet] = amount * 3;\n      } else if (bet === 'Col2' && sample % 3 === 2) {\n        winningBets[bet] = amount * 3;\n      } else if (bet === 'Col3' && sample % 3 === 0) {\n        winningBets[bet] = amount * 3;\n      } else if (bet === 'Dozen1' && sample <= 12) {\n        winningBets[bet] = amount * 3;\n      } else if (bet === 'Dozen2' && sample > 12 && sample <= 24) {\n        winningBets[bet] = amount * 3;\n      } else if (bet === 'Dozen3' && sample > 24) {\n        winningBets[bet] = amount * 3;\n      } else if (bet === 'Low' && sample <= 18) {\n        winningBets[bet] = amount * 2;\n      } else if (bet === 'High' && sample > 18) {\n        winningBets[bet] = amount * 2;\n      } else if (bet === 'Red' && NUMBER_TO_COLOR[sample] === 'R') {\n        winningBets[bet] = amount * 2;\n      } else if (bet === 'Black' && NUMBER_TO_COLOR[sample] === 'B') {\n        winningBets[bet] = amount * 2;\n      }\n    }\n    console.log(\"Winning Bets\", winningBets);\n    setWinningBets(winningBets);\n    setResolved(true);\n  };\n\n  const increment = (cls) => {\n    let size = inc / TICK_SIZE.toNumber();\n    let currTotal = totalSize;\n    let maxSize = Math.min(chips / TICK_SIZE.toNumber(), MAX_BET_SIZE.toNumber() / TICK_SIZE.toNumber())\n    if (size + totalSize > maxSize) {\n      size = maxSize - totalSize;\n    }\n    if (size > 0) {\n      if (!(cls in state)) {\n        state[cls] = 0;\n      }\n      state[cls] += size;\n      currTotal += size;\n      setState({ ...state });\n      setTotalSize(currTotal);\n    }\n  };\n\n  const lock = () => {\n    setLocked(true);\n  };\n\n  const unlock = () => {\n    setLocked(false);\n  };\n\n  const decrement = (cls) => {\n    if (cls in state && state[cls] > 0) {\n      let currTotal = totalSize;\n      let size = inc / TICK_SIZE.toNumber();\n      state[cls] -= size;\n      currTotal -= size;\n      if (state[cls] <= 0) {\n        delete state[cls];\n        setTotalSize(0);\n      } else {\n        setTotalSize(currTotal);\n      }\n      setState({ ...state });\n    }\n  };\n\n  const clear = () => {\n    setState({});\n    setTotalSize(0);\n    setWinningBets({});\n    setResolved(false);\n  };\n\n  return (\n    <BetTrackerContext.Provider\n      value={{\n        state,\n        locked,\n        resolved,\n        winningBets,\n        chips,\n        loaded,\n        grayscale,\n        setGrayscale,\n        setChips,\n        setLoaded,\n        lock,\n        unlock,\n        increment,\n        decrement,\n        updateInc,\n        clear,\n        updateBetResults,\n      }}\n    >\n      {children}\n    </BetTrackerContext.Provider>\n  );\n};\n","export * from './constants';\nexport * from './context';\nexport * from './decoders';\nexport * from './schema';\nexport * from './state';\nexport * from './transactions';\nexport * from './betEnum';","import React, { useContext, useState } from 'react';\nimport BN from 'bn.js';\nimport {\n    decodeRNG\n} from './decoders'\nimport { toPublicKey } from '../utils';\nimport { useConnection } from '../contexts';\nimport { sample } from './transactions';\nimport { Keypair } from '@solana/web3.js';\nexport * from './constants'\n\n\nconst defaultContext = { \n  currentSample: 0,\n  currentRawSample: new BN(0),\n  currentSlot: new BN(0),\n  initialized: false,\n  convertedSamples: [0],\n  rawSamples: [new BN(0)],\n  duplicated: false,\n  feePayer: Keypair.generate(),\n  sample,\n  updateSample: async (key): Promise<void> => new Promise(() => {}),\n  setState: (values: any): void => undefined,\n}\n\nconst RNGContext = React.createContext({ ...defaultContext });\n\n\nexport function RNGProvider({ children = null as any }) {\n  const connection = useConnection();\n  const [state, setState] = useState({ ...defaultContext });\n\n  return (\n    <RNGContext.Provider\n      value={{\n        ...state,\n        setState,\n        updateSample: async (RNGKey: any) => {\n          const newState = {...state};\n          const RNGAccount = await connection.getAccountInfo(toPublicKey(RNGKey));\n          if (RNGAccount === null) {\n            throw new Error('Failed to find RNG account');\n          }\n          const data = Buffer.from(RNGAccount.data)\n          let RNG = decodeRNG(data);  \n          if (RNG.version === 0) { \n            return;\n          }\n          if (!newState.initialized) {\n              newState.initialized = true;\n              newState.convertedSamples = [];\n              newState.rawSamples = [];\n          }\n          newState.currentRawSample = RNG.sample;\n          newState.currentSample = RNG.sample.modn(38);\n          newState.convertedSamples = [...newState.convertedSamples, newState.currentSample];\n          if (newState.currentSlot === RNG.slot) {\n              newState.duplicated = true;\n          } else {\n              newState.duplicated = false;\n          }\n          newState.currentSlot = RNG.slot;\n          console.log(\"Newest Sample:\", newState.currentSample);\n          console.log(\"RNG\", RNG);\n          console.log(\"Previous state\", state);\n          console.log(\"Full state\", newState);\n          setState(newState);\n        },\n      }}\n    >\n      {children}\n    </RNGContext.Provider>\n  );\n}\n\nexport const useRNG = () => {\n  const context = useContext(RNGContext);\n  return context;\n};\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\nimport { Button } from \"antd\";\n\nimport ConnectButton from \"../ConnectButton\";\nimport {\n  ModalEnum,\n  useBetTracker,\n  useModal,\n  useWalletModal,\n  deserializeAccount,\n} from \"../../contexts\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  useConnection,\n  useConnectionConfig,\n} from \"../../contexts/ConnectionContext\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  TICK_SIZE,\n  MAX_BET_SIZE,\n  MINIMUM_BANK_SIZE,\n  DEVNET_MINT,\n  initializeHoneypot,\n  MAINNET_MINT,\n  RNG_PROGRAM_ID,\n  mintChips,\n  DECIMALS,\n} from \"../../actions\";\nimport BalancePanel from \"../../components/BalancePanel/BalancePanel\";\nimport { set } from \"lodash\";\n\nconst getMintString = (connection, wallet, env, ctx) => {\n  let mintString;\n  let color;\n  let textColor;\n  const maxChips = MAX_BET_SIZE.toNumber();\n  if (env === 'devnet' && ctx.loaded && ctx.chips < maxChips && !ctx.locked) {\n    const remainder = maxChips - ctx.chips;\n    mintString = `Mint ${remainder / TICK_SIZE.toNumber()} chips`;\n    color = \"lightgreen\";\n    textColor = \"black\";\n    return (\n      <Button\n        onClick={() => mintChips(connection, wallet, env, remainder)}\n        style={{ backgroundColor: color, color: textColor, border: \"none\" }}\n        disabled={ctx.chips > maxChips}\n      >\n        {mintString}\n      </Button>\n    );\n  } else {\n    return \"\"\n  }\n};\n\nexport const Header: React.FC = () => {\n  const { setModal } = useModal();\n  const { setVisible } = useWalletModal();\n  const wallet = useWallet();\n  const connected = wallet.connected;\n  const connection = useConnection();\n  const { env } = useConnectionConfig();\n  const [honeypotButton, setHoneypotButton] = useState(true);\n  const betTrackerCtx: any = useBetTracker();\n  const [houseBalance, setHouseBalance] = useState(0);\n  const open = useCallback(() => setVisible(true), [setVisible]);\n\n  const handleConnect = useCallback(() => {\n    setModal(ModalEnum.WALLET);\n    setVisible(true);\n  }, [setModal, setVisible]);\n\n  useEffect(() => {}, [betTrackerCtx.grayscale]);\n\n  useEffect(() => {\n    const getHoneypot = async () => {\n      let mintAccount = env === \"devnet\" ? DEVNET_MINT : MAINNET_MINT;\n      let [honeypotKey, _honeypotBumpSeed] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"honeypot\"),\n          mintAccount.toBuffer(),\n          new Uint8Array(TICK_SIZE.toArray(\"le\", 8)),\n          new Uint8Array(MAX_BET_SIZE.toArray(\"le\", 8)),\n          new Uint8Array(MINIMUM_BANK_SIZE.toArray(\"le\", 8)),\n        ],\n        RNG_PROGRAM_ID\n      );\n      console.log(\"honeypot\", honeypotKey.toBase58());\n      try {\n        let res = await connection.getAccountInfo(honeypotKey);\n        if (!res) {\n          setHoneypotButton(false);\n        }\n      } catch (e) {\n        console.log(\"Failed to fetch honeypot: \", e);\n        return;\n      }\n    };\n    console.log(wallet.publicKey);\n    getHoneypot();\n  }, [connection]);\n\n  useEffect(() => {\n    let subId;\n    const getHouseBalance = async () => {\n      if (!wallet) {\n        return 0;\n      }\n      if (!wallet.publicKey) {\n        return 0;\n      }\n      const mint = (env === \"devnet\") ? DEVNET_MINT : MAINNET_MINT;\n      let [vaultKey, _vaultBumpSeed] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"vault\"),\n          mint.toBuffer(),\n          new Uint8Array(TICK_SIZE.toArray(\"le\", 8)),\n          new Uint8Array(MAX_BET_SIZE.toArray(\"le\", 8)),\n          new Uint8Array(MINIMUM_BANK_SIZE.toArray(\"le\", 8)),\n        ],\n        RNG_PROGRAM_ID\n      );\n      const result = await connection.getAccountInfo(vaultKey);\n      if (result) {\n        console.log(\"Received account data\");\n        const tokenAccount = deserializeAccount(result.data);\n        console.log(tokenAccount)\n        setHouseBalance(tokenAccount.amount.toNumber());\n      }\n      betTrackerCtx.setLoaded(true);\n      subId = connection.onAccountChange(vaultKey, (result) => {\n        if (result) {\n          console.log(\"Received account data\");\n          try {\n            const tokenAccount = deserializeAccount(result.data);\n            setHouseBalance(tokenAccount.amount.toNumber());\n          } catch(e) {\n            console.log(\"Failed to deserialize account\", e)\n          }\n        }\n      });\n    };\n    getHouseBalance();\n    return () => {\n      if (subId) connection.removeAccountChangeListener(subId);\n    };\n  }, [wallet.connected, wallet, connection, setHouseBalance]);\n\n  const handleChange = open;\n  return (\n    <Flex backgroundColor=\"#444444\" justifyContent=\"space-between\" minW=\"100%\" filter={betTrackerCtx.grayscale}>\n      <Flex justifyContent=\"flex-begin\" minW=\"500px\">\n        <BalancePanel />\n        <Flex\n          marginLeft=\"180px\"\n          height=\"62px\"\n          justifyContent=\"flex-begin\"\n          alignItems=\"center\"\n        >\n          {getMintString(connection, wallet, env, betTrackerCtx)}\n        </Flex>\n      </Flex>\n      <Flex\n        height=\"62px\"\n        marginLeft=\"20px\"\n        justifyContent=\"flex-begin\"\n        alignItems=\"center\"\n      >\n        {connected && !honeypotButton && (\n          <Button\n            onClick={() =>\n              initializeHoneypot(connection, wallet, env).then((v) => {\n                console.log(v);\n                if (v) {\n                  setHoneypotButton(true);\n                }\n              })\n            }\n          >\n            {\" \"}\n            Create Honeypot{\" \"}\n          </Button>\n        )}\n      </Flex>\n      <Flex\n        height=\"62px\"\n        minW=\"400px\"\n        marginLeft=\"20px\"\n        justifyContent=\"50%\"\n        alignItems=\"center\"\n        fontSize={20}\n        color=\"white\"\n      >\n        House Balance: {houseBalance * Math.pow(10, -DECIMALS)} COPE\n      </Flex>\n      <Flex height=\"62px\" width=\"300px\" justifyContent=\"flex-end\" alignItems=\"center\">\n        <ConnectButton\n          isConnected={connected}\n          mr=\"36px\"\n          onClickConnect={handleConnect}\n          onClickChange={handleChange}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Header;\n","import {\n  ButtonGroupProps,\n  ButtonGroup,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { Settings } from \"./Settings\";\n\nexport type ConnectButtonProps = ButtonGroupProps & {\n  isConnected: boolean;\n  onClickConnect: () => void;\n  onClickChange: () => void;\n};\n\nexport const ConnectButton: React.FC<ConnectButtonProps> = ({\n  isConnected,\n  onClickConnect,\n  onClickChange,\n  ...restProps\n}) => {\n  return (\n    <>\n      <ButtonGroup isAttached {...restProps}>\n        <Settings/>\n      </ButtonGroup>\n    </>\n  );\n};\n\nexport default ConnectButton;\n","import React, { useMemo } from \"react\";\nimport { Flex, FlexProps, Text, Image, Box } from \"@chakra-ui/react\";\nimport balanceBgSvg from \"../../assets/images/balance_bg.svg\";\n\nexport type BalanceProps = FlexProps & {\n  cryptoAmount: number;\n};\n\nexport const Balance: React.FC<BalanceProps> = ({\n  cryptoAmount,\n  ...restProps\n}) => {\n  const balance = \"Your Balance\";\n  const cryptoAbbr = \"COPE\";\n  return (\n    <Box\n      display=\"flex\"\n      height={\"50px\"}\n      width=\"270px\"\n      backgroundColor=\"grey\"\n      borderLeftRadius={\"32px\"}\n      alignItems=\"center\"\n      boxShadow=\"0px 4px 4px #000000 25%\"\n      {...restProps}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-evenly\" flexGrow={1}>\n        <Image width=\"100px\" align=\"\" src=\"./cope.png\" ml=\"16px\" mr=\"10px\" />\n        <Flex flexDirection=\"column\" flexGrow={1}>\n          <Flex justifyContent=\"space-between\">\n            <Text textStyle=\"small\" color=\"white\">\n              {balance}\n            </Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\" marginRight=\"10px\">\n            <Text textStyle=\"caption\" color=\"white\">\n              {cryptoAbbr}\n            </Text>\n            <Text textStyle=\"caption\" color=\"green.300\">\n              {cryptoAmount}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default Balance;\n","import React, { useEffect, useState } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\nimport { Balance } from \"../Balance/Balance\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { deserializeAccount, useBetTracker, useConnection, useConnectionConfig } from \"../../contexts\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID, AccountLayout } from \"@solana/spl-token\";\nimport { DEVNET_MINT, MAINNET_MINT, TICK_SIZE } from \"../../actions\";\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from \"../../utils/ids\";\n\n\nexport const BalancePanel: React.FC = () => {\n  const connection = useConnection();\n  const { env } = useConnectionConfig();\n  const wallet = useWallet();\n  const betTrackerCtx: any = useBetTracker();\n  useEffect(() => {\n    let subId;\n    const getChips = async () => {\n      if (!wallet) {\n        return 0;\n      }\n      if (!wallet.publicKey) {\n        return 0;\n      }\n      const mint = (env === \"devnet\") ? DEVNET_MINT : MAINNET_MINT;\n      const chipTokenAccount = (\n        await PublicKey.findProgramAddress(\n          [wallet.publicKey.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n          SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID \n        )\n      )[0]\n      const result = await connection.getAccountInfo(chipTokenAccount);\n      if (result) {\n        console.log(\"Received account data\");\n        const tokenAccount = deserializeAccount(result.data);\n        console.log(tokenAccount)\n        betTrackerCtx.setChips(tokenAccount.amount.toNumber());\n      }\n      betTrackerCtx.setLoaded(true);\n      subId = connection.onAccountChange(chipTokenAccount, (result) => {\n        if (result) {\n          console.log(\"Received account data\");\n          try {\n            const tokenAccount = deserializeAccount(result.data);\n            betTrackerCtx.setChips(tokenAccount.amount.toNumber());\n          } catch(e) {\n            console.log(\"Failed to deserialize account\", e)\n          }\n        }\n      });\n    };\n    getChips();\n\n    return () => {\n      if (subId) connection.removeAccountChangeListener(subId);\n    };\n  }, [wallet.connected, wallet, connection, betTrackerCtx.setChips]);\n  return (\n    <Flex\n      flexDirection=\"column\"\n      marginLeft=\"20px\"\n      marginTop=\"5px\"\n      width=\"100px\"\n    >\n      <Balance cryptoAmount={Math.floor((betTrackerCtx.chips as number) / TICK_SIZE.toNumber())} />\n    </Flex>\n  );\n};\n\nexport default BalancePanel;\n","import { StringPublicKey } from '../utils';\nimport BN from 'bn.js'\n\nexport class RNG {\n  version: number;\n  sample: BN;\n  slot: BN;\n  constructor(args: {\n    version: number;\n    sample: BN;\n    slot: BN;\n  }) {\n    this.version = args.version;\n    this.sample = args.sample;\n    this.slot = args.slot;\n  }\n}\n\nexport class Honeypot {\n  version: number;\n  honeypotBumpSeed: number;\n  vaultBumpSeed: number;\n  owner: StringPublicKey;\n  mint: StringPublicKey;\n  tickSize: BN;\n  maxAmount: BN;\n  minimumBankSize: BN;\n  owedAmount: BN;\n  constructor(args: {\n    version: number;\n    honeypotBumpSeed: number;\n    vaultBumpSeed: number;\n    owner: StringPublicKey;\n    mint: StringPublicKey;\n    tickSize: BN;\n    maxAmount: BN;\n    minimumBankSize: BN;\n    owedAmount: BN;\n  }) {\n    this.version = args.version;\n    this.honeypotBumpSeed = args.honeypotBumpSeed;\n    this.vaultBumpSeed = args.vaultBumpSeed;\n    this.owner = args.owner;\n    this.mint = args.mint;\n    this.tickSize = args.tickSize;\n    this.maxAmount = args.maxAmount;\n    this.minimumBankSize = args.minimumBankSize;\n    this.owedAmount = args.owedAmount;\n  }\n}\n\nexport class LockedGuess {\n  version: number;\n  bumpSeed: number;\n  owner: StringPublicKey;\n  vault: StringPublicKey;\n  slot: BN; \n  reward: BN; \n  active: number; \n  guesses: BN[]; \n  constructor(args: {\n    version: number;\n    bumpSeed: number;\n    owner: StringPublicKey;\n    vault: StringPublicKey;\n    slot: BN; \n    reward: BN; \n    active: number; \n    guesses: BN[]; \n  }) {\n    this.version = args.version;\n    this.bumpSeed = args.bumpSeed;\n    this.owner = args.owner;\n    this.vault = args.vault;\n    this.slot = args.slot;\n    this.reward = args.reward;\n    this.active = args.active;\n    this.guesses = args.guesses;\n  }\n}\n\nexport class RouletteGuess {\n  guess: number;\n  amount: BN;\n  constructor(args: {\n    guess: number;\n    amount: BN;\n  }) {\n    this.guess = args.guess;\n    this.amount = args.amount;\n  }\n}\n\nexport class InitializeArgs {\n  instruction: number = 0;\n}\n\nexport class SampleArgs {\n  instruction: number = 1;\n  tolerance: BN;\n  constructor(args: {\n      tolerance: BN\n  }) {\n    this.tolerance = args.tolerance;\n  }\n}\n\nexport class InitializeHoneypotArgs {\n  instruction: number = 2;\n  tickSize: BN;\n  maxBetSize: BN;\n  minimumBankSize: BN;\n  constructor(args: {\n    tickSize: BN,\n    maxBetSize: BN;\n    minimumBankSize: BN;\n  }) {\n    this.tickSize = args.tickSize;\n    this.maxBetSize = args.maxBetSize;\n    this.minimumBankSize = args.minimumBankSize;\n  }\n}\n\nexport class WithdrawFromHoneypotArgs {\n  instruction: number = 3;\n  amountToWithdraw: BN;\n  constructor(args: {\n    amountToWithdraw: BN;\n  }) {\n    this.amountToWithdraw = args.amountToWithdraw;\n  }\n}\n\nexport class InitializeGuessAccountArgs {\n  instruction: number = 4;\n}\n\nexport class PlaceGuessesArgs {\n  instruction: number = 5;\n  guesses: RouletteGuess[];\n  constructor(args: {\n    guesses: RouletteGuess[];\n  }) {\n    this.guesses = args.guesses;\n  }\n}\n\nexport class SpinArgs {\n  instruction: number = 6;\n  tolerance: BN;\n  constructor(args: {\n    tolerance: BN;\n  }) {\n    this.tolerance = args.tolerance;\n  }\n}\n\nexport class TryCancelArgs {\n  instruction: number = 7;\n}","import { PublicKey, AccountInfo, Account } from '@solana/web3.js';\n\nexport type StringPublicKey = string;\n\nexport class LazyAccountInfoProxy<T> {\n  executable: boolean = false;\n  owner: StringPublicKey = '';\n  lamports: number = 0;\n\n  get data() {\n    //\n    return undefined as unknown as T;\n  }\n}\n\nexport interface LazyAccountInfo {\n  executable: boolean;\n  owner: StringPublicKey;\n  lamports: number;\n  data: [string, string];\n}\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\nexport const toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== 'string') {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nexport interface PublicKeyStringAndAccount<T> {\n  pubkey: string;\n  account: AccountInfo<T>;\n}\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const BPF_UPGRADE_LOADER_ID = new PublicKey('BPFLoaderUpgradeab1e11111111111111111111111');\n\nexport const MEMO_ID = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');\n\nexport const SYSTEM = new PublicKey('11111111111111111111111111111111');\n","import {\n  RNG,\n  RouletteGuess,\n  LockedGuess,\n  InitializeArgs,\n  SampleArgs,\n  InitializeHoneypotArgs,\n  WithdrawFromHoneypotArgs,\n  InitializeGuessAccountArgs,\n  PlaceGuessesArgs,\n  SpinArgs,\n  TryCancelArgs,\n  Honeypot,\n} from \"./state\";\n\nexport const schema = new Map<any, any>([\n  [\n    InitializeArgs,\n    {\n      kind: \"struct\",\n      fields: [[\"instruction\", \"u8\"]],\n    },\n  ],\n  [\n    SampleArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"tolerance\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    InitializeHoneypotArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"tickSize\", \"u64\"],\n        [\"maxBetSize\", \"u64\"],\n        [\"minimumBankSize\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    WithdrawFromHoneypotArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"amountToWithdraw\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    InitializeGuessAccountArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    PlaceGuessesArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"guesses\", [RouletteGuess]],\n      ],\n    },\n  ],\n  [\n    SpinArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n        [\"tolerance\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    TryCancelArgs,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"instruction\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Honeypot,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"version\", \"u8\"],\n        [\"honeypotBumpSeed\", \"u8\"],\n        [\"vaultBumpSeed\", \"u8\"],\n        [\"owner\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"tickSize\", \"u64\"],\n        [\"maxAmount\", \"u64\"],\n        [\"minimumBankSize\", \"u64\"],\n        [\"owedAmount\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    RouletteGuess,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"guess\", \"u8\"],\n        [\"amount\", \"u64\"],\n      ],\n    },\n  ],\n  [\n    RNG,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"version\", \"u8\"],\n        [\"sample\", \"u64\"],\n        [\"slot\", \"u64\"],\n      ],\n    },\n  ],\n]);\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst theme = extendTheme({\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n    fonts: {\n        heading: \"Open Sans\",\n        body: \"Roboto\",\n        time: \"Sora\",\n    },\n\n    textStyles: {\n        title: {\n            fontFamily: \"time\",\n            fontSize: \"24px\",\n            fontWeight: \"600\",\n            lineHeight: \"30px\",\n        },\n        emphasis: {\n            fontFamily: \"body\",\n            fontSize: \"20px\",\n            fontWeight: \"bold\",\n            lineHeight: \"23px\",\n        },\n        accent: {\n            fontFamily: \"body\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            lineHeight: \"28px\",\n        },\n        regular: {\n            fontFamily: \"body\",\n            fontSize: \"16px\",\n            fontWeight: \"400\",\n            lineHeight: \"28px\",\n        },\n        small: {\n            fontFamily: \"body\",\n            fontSize: \"14px\",\n            fontWeight: \"400\",\n            lineHeight: \"24px\",\n        },\n        caption: {\n            fontFamily: \"body\",\n            fontSize: \"12px\",\n            fontWeight: \"400\",\n            lineHeight: \"18px\",\n        },\n        heading: {\n            fontFamily: \"heading\",\n            fontSize: \"11px\",\n            fontWeight: \"600\",\n            lineHeight: \"18px\",\n        },\n        table: {\n            fontFamily: \"body\",\n            fontSize: \"11px\",\n            fontWeight: \"400\",\n            lineHeight: \"18px\",\n        },\n        timer: {\n            fontFamily: \"time\",\n            fontSize: \"14px\",\n            fontWeight: \"400\",\n            lineHeight: \"18px\",\n        },\n    },\n    colors: {\n        brand: {\n            50: \"#616162\",\n            100: \"#1e1e20\",\n            200: \"#131315\",\n            300: \"#323234\",\n            400: \"#141c29\",\n            500: \"#1a2029\",\n            600: \"#202734\",\n            700: \"#0F1724\",\n        },\n        gray: {\n            50: \"#808080\",\n            100: \"#f1f1f1\",\n            200: \"#f2f2f2\",\n            250: \"#cfcfcf\",\n            260: \"#c9c9c9\",\n            300: \"#e5e5e5\",\n            400: \"#969696\",\n            500: \"#434343\",\n            600: \"#464647\",\n        },\n        blue: { 300: \"#0085ff\" },\n        teal: { 300: \"#29bdd2\" },\n        green: {\n            200: \"#1f5e39\",\n            300: \"#00ff00\",\n            400: \"#33cf71\",\n        },\n        red: {\n            300: \"#ed2939\",\n        },\n        purple: {\n            200: \"#a5a6f6\",\n            300: \"#7b61ff\",\n        },\n    },\n});\n\nexport default theme;\n","import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport confetti from 'canvas-confetti';\nimport { useBetTracker } from '../../contexts';\n\nexport interface ConfettiContextState {\n  dropConfetti: (bool) => void;\n}\n\nconst ConfettiContext = React.createContext<ConfettiContextState | null>(null);\n\nexport const ConfettiProvider = ({ children = null as any }) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<confetti.CreateTypes>();\n  const betTrackerCtx: any = useBetTracker()\n\n  const dropConfetti = useMemo(\n    () => (won) => {\n      if (confettiRef.current && canvasRef.current) {\n        if (!won) {\n          canvasRef.current.style.filter = \"grayscale(1)\";\n        } else {\n          canvasRef.current.style.filter = \"\";\n        }\n        canvasRef.current.style.visibility = 'visible';\n        confettiRef\n          .current({\n            particleCount: 400,\n            spread: 160,\n            origin: { y: 0.3 },\n          })\n          ?.finally(() => {\n            if (canvasRef.current) {\n              canvasRef.current.style.visibility = 'hidden';\n            }\n          });\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (canvasRef.current && !confettiRef.current) {\n      canvasRef.current.style.visibility = 'hidden';\n      confettiRef.current = confetti.create(canvasRef.current, {\n        resize: true,\n        useWorker: true,\n      });\n    }\n  }, []);\n\n  const canvasStyle: React.CSSProperties = {\n    width: '100vw',\n    height: '100vh',\n    position: 'absolute',\n    zIndex: 1,\n    top: 0,\n    left: 0,\n  };\n\n  return (\n    <ConfettiContext.Provider value={{ dropConfetti }}>\n      <canvas ref={canvasRef as any} style={canvasStyle} />\n      {children}\n    </ConfettiContext.Provider>\n  );\n};\n\nexport const Confetti = () => {\n  const { dropConfetti } = useConfetti();\n\n  useEffect(() => {\n    dropConfetti(true);\n  }, [dropConfetti]);\n\n  return <></>;\n};\n\nexport const useConfetti = () => {\n  const context = useContext(ConfettiContext);\n  return context as ConfettiContextState;\n};","import React, { useEffect, useState, useRef } from \"react\";\nimport SpinButton from \"../SpinButton\";\nimport { useRNG } from \"../../actions\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\nimport \"./styles.css\";\nimport { useBetTracker, useConnection, useConnectionConfig } from \"../../contexts\";\nimport { notify } from \"../../utils/notifications\";\nimport { useConfetti } from \"../Confetti\";\n\nconst rouletteState = {\n  list: [\n    \"37\",\n    \"27\",\n    \"10\",\n    \"25\",\n    \"29\",\n    \"12\",\n    \"8\",\n    \"19\",\n    \"31\",\n    \"18\",\n    \"6\",\n    \"21\",\n    \"33\",\n    \"16\",\n    \"4\",\n    \"23\",\n    \"35\",\n    \"14\",\n    \"2\",\n    \"0\",\n    \"28\",\n    \"9\",\n    \"26\",\n    \"30\",\n    \"11\",\n    \"7\",\n    \"20\",\n    \"32\",\n    \"17\",\n    \"5\",\n    \"22\",\n    \"34\",\n    \"15\",\n    \"3\",\n    \"24\",\n    \"36\",\n    \"13\",\n    \"1\",\n  ],\n  radius: 150, // PIXELS\n  spinning: false,\n};\n\nexport const RouletteWheel: React.FC = ({ ...children }) => {\n  let rngCtx: any = useRNG();\n  let confettiCtx: any = useConfetti();\n  let wallet = useWallet();\n  let connection = useConnection();\n  let betTrackerCtx: any = useBetTracker();\n  let [state, setState] = useState(rouletteState);\n  let [surprise, setSurprise] = useState(false);\n  let [startIdx, setStartIdx] = useState(0);\n  let [responseState, setResponseState] = useState({\n    received: true,\n    selected: 0,\n  });\n  let { env } = useConnectionConfig();\n  useEffect(() => {\n    const renderSector = (start, arc, color) => {\n      const canvas = document.getElementById(\"wheel\") as HTMLCanvasElement;\n      if (!canvas) {\n        return;\n      }\n      let ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let x = canvas.width / 2;\n      let y = canvas.height / 2;\n      let radius = state.radius;\n      let startAngle = start;\n      let endAngle = start + arc;\n      ctx.beginPath();\n      ctx.arc(x, y, radius, startAngle, endAngle, false);\n      ctx.lineWidth = radius * 2;\n      ctx.strokeStyle = color;\n      ctx.stroke();\n    };\n\n    const renderText = (index, text, start, arc) => {\n      let canvas = document.getElementById(\"wheel\") as HTMLCanvasElement;\n      if (!canvas) {\n        return;\n      }\n      let ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let x = canvas.width / 2;\n      let y = canvas.height / 2;\n      let radius = state.radius;\n      let angle = arc * index;\n      ctx.save();\n      ctx.font = \"20px Arial\";\n      ctx.fillStyle = \"white\";\n      ctx.lineWidth = 3;\n      let x_offset = x + Math.cos(start + angle + arc / 2) * 1.8 * radius;\n      let y_offset = y + Math.sin(start + angle + arc / 2) * 1.8 * radius;\n      ctx.translate(x_offset, y_offset);\n      ctx.rotate(angle);\n      ctx.fillText(text, -ctx.measureText(text).width / 2, 0);\n      ctx.restore();\n    };\n\n    const drawTriangle = () => {\n      let canvas = document.getElementById(\"wheel\") as HTMLCanvasElement;\n      if (!canvas) {\n        return;\n      }\n      let ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let x = canvas.width / 2;\n      let y = canvas.height / 2;\n      let radius = state.radius;\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.fillStyle = \"white\";\n      ctx.strokeStyle = \"white\";\n      let region = new Path2D();\n      region.moveTo(x, y - 2 * radius);\n      region.lineTo(x - 20, y - 2 * radius - 40);\n      region.lineTo(x + 20, y - 2 * radius - 40);\n      region.lineTo(x, y - 2 * radius);\n      region.closePath();\n      ctx.fill(region);\n    };\n\n    const getColor = (i) => {\n      if (parseInt(state.list[i]) === 0 || parseInt(state.list[i]) === 37) {\n        return \"darkseagreen\";\n      } else if (i % 2 === 1) {\n        return \"sienna\";\n      } else {\n        return \"#121212\";\n      }\n    };\n\n    const renderWheel = async () => {\n      let canvas = document.getElementById(\"wheel\") as HTMLCanvasElement;\n      if (!canvas) {\n        return;\n      }\n      let ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      let numOptions = state.list.length;\n      let arcSize = (2 * Math.PI) / numOptions;\n      let startAngle = (3 * Math.PI) / 2 - Math.PI / numOptions;\n      let angle = startAngle;\n      let counter = startIdx;\n      for (let i = 0; i < numOptions; i++) {\n        renderSector(angle, arcSize, getColor(counter));\n        counter = (counter + 1) % numOptions;\n        angle += arcSize;\n      }\n      counter = startIdx;\n      for (let i = 0; i < numOptions; i++) {\n        let text = state.list[counter];\n        if (text === \"37\") {\n          text = \"00\";\n        }\n        renderText(i, text, startAngle, arcSize);\n        counter = (counter + 1) % numOptions;\n      }\n      const x = canvas.width / 2;\n      const y = canvas.height / 2;\n      ctx.beginPath();\n      ctx.fillStyle = \"#121212\";\n      ctx.arc(x, y, state.radius * 1.2, 0, 2*Math.PI);\n      ctx.fill()\n      ctx.beginPath();\n      ctx.fillStyle = \"white\";\n      ctx.arc(x - 55, y, 15, 0, 2*Math.PI);\n      ctx.fill()\n      ctx.beginPath();\n      ctx.fillStyle = \"white\";\n      ctx.arc(x, y, 15, 0, 2*Math.PI);\n      ctx.fill()\n      ctx.beginPath();\n      ctx.fillStyle = \"white\";\n      ctx.arc(x + 55, y, 15, 0, 2*Math.PI);\n      ctx.fill()\n      ctx.beginPath();\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 3;\n      ctx.arc(x, y, state.radius * 1.5, 0, 2*Math.PI);\n      ctx.stroke()\n      ctx.beginPath();\n      ctx.strokeStyle = \"gold\";\n      ctx.lineWidth = 2;\n      ctx.arc(x, y, .5 + state.radius * 1.5, 0, 2*Math.PI);\n      ctx.stroke()\n      if (state.spinning) {\n        let nextIdx = (startIdx + 1) % numOptions;\n        if (\n          responseState.received &&\n          parseInt(state.list[nextIdx]) === responseState.selected\n        ) {\n          setState({ ...state, spinning: false });\n          if (surprise) {\n            betTrackerCtx.updateBetResults(rngCtx.currentSample);\n            let bet =  (Object.values(betTrackerCtx.state).reduce(\n              (a, b) => (a as number) + (b as number),\n              0\n            ))\n            let winnings = (Object.values(betTrackerCtx.winningBets).reduce(\n              (a, b) => (a as number) + (b as number),\n              0\n            ));\n            const wonBet = (winnings as number) >= (bet as number);\n            if (!wonBet) {\n              console.log(\"Setting grayscale\")\n              betTrackerCtx.setGrayscale(\"grayscale(1)\")\n            } \n            confettiCtx.dropConfetti(wonBet);\n            setSurprise(false);\n            \n          }\n        }\n        await new Promise((r) => setTimeout(r, 30)).then(() => {\n          setStartIdx(nextIdx);\n        });\n      }\n    };\n    renderWheel();\n    drawTriangle();\n  }, [state.spinning, startIdx, responseState]);\n\n  useEffect(() => {\n    if (rngCtx.initialized) {\n      if (!rngCtx.duplicated) {\n        setResponseState({ received: true, selected: rngCtx.currentSample });\n        setSurprise(true);\n      } else {\n        notify({\n          message:\n            \"Failed to read new value from on-chain sampler. Please try again!\",\n        });\n        console.log(\"ctx\", rngCtx);\n        setState({ ...state, spinning: false });\n        setStartIdx(0);\n        setResponseState({ received: false, selected: 0 });\n      }\n    }\n  }, [rngCtx.currentSample, rngCtx.duplicated, rngCtx.currentSlot]);\n\n  useEffect(\n    () => {},\n    [betTrackerCtx.grayscale],\n  );\n\n  const spin = async () => {\n    setState({\n      ...state,\n      spinning: true,\n    });\n    betTrackerCtx.lock();\n    setResponseState({ ...responseState, received: false });\n    if (!(await rngCtx.sample(connection, wallet, env, rngCtx, betTrackerCtx))) {\n      setState({ ...state, spinning: false });\n      setStartIdx(0);\n      setResponseState({ received: false, selected: 0 });\n      return;\n    }\n  };\n\n  const reset = () => {\n    setStartIdx(0);\n    setState({\n      ...state,\n      spinning: false,\n    });\n    betTrackerCtx.setGrayscale(\"\")\n    betTrackerCtx.unlock();\n    betTrackerCtx.clear();\n    setResponseState({ received: true, selected: 0 });\n  };\n\n  return (\n    <div>\n      <canvas id=\"wheel\" width=\"600\" height=\"680\" style={{filter:betTrackerCtx.grayscale}} />\n      {state.spinning ? (\n        <SpinButton name=\"Loading...\" disabled={true} />\n      ) : !betTrackerCtx.locked ? (\n        <SpinButton\n          name=\"Spin the Wheel\"\n          disabled={\n            0 ===\n            Object.values(betTrackerCtx.state).reduce(\n              (a, b) => (a as number) + (b as number),\n              0\n            )\n          }\n          onClick={spin}\n        />\n      ) : (\n        <SpinButton name=\"Reset\" onClick={reset} />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./board.css\";\nimport { useBetTracker } from \"../../contexts\";\nimport { Center, Flex, Text } from \"@chakra-ui/react\";\nimport ReactDOM from \"react-dom\";\n\nconst formatCell = (cls, text, ctx) => {\n  let elem = document.querySelector(\".\" + cls);\n  const newStyle: any = {\n    fontSize: 18,\n  }\n  if (elem) {\n    let style = getComputedStyle(elem);\n    if (style) {\n      let color = style.backgroundColor;\n      let rgb = color.match(/\\d+/g);\n      if (rgb && ctx.grayscale !== \"\") {\n        let gray = 0;\n        for (let i = 0; i < rgb.length; i++) {\n          gray += parseInt(rgb[i]);\n        }\n        gray /= rgb.length;\n        newStyle.backgroundColor = `rgb(${gray}, ${gray}, ${gray})`;\n      } else if (ctx.grayscale) {\n        console.log(rgb);\n      }\n    }\n  }\n  return (\n    <div\n      style={newStyle}\n      className={cls}\n      onClick={() => {\n        if (!ctx.locked) ctx.increment(cls);\n      }}\n      onContextMenu={(e) => {\n        if (e.type == \"contextmenu\") {\n          e.preventDefault();\n          if (!ctx.locked) ctx.decrement(cls);\n        }\n      }}\n    >\n      <Flex flexDirection=\"column\">\n        <Flex maxH=\"60%\" minH=\"60%\" align=\"center\">\n          <Center w=\"100%\">\n            <Text textAlign=\"center\"> {text} </Text>{\" \"}\n          </Center>\n        </Flex>\n        <Flex flexDirection=\"row\" minH=\"30%\" maxH=\"30%\" justifyContent='space-between'>\n          <Flex flexDirection=\"column\" flexGrow={1}>\n            <Text\n              fontSize={11}\n              color={!ctx.resolved ? \"lime\" : \"red\"}\n              fontWeight=\"bold\"\n            >\n              {\" \"}\n              {cls in ctx.state ? Math.floor(ctx.state[cls]) : \"\"}{\" \"}\n            </Text>\n          </Flex>\n          <Flex flexDirection=\"column\" flexGrow={3}>\n            <Text fontSize={11} color=\"lime\" fontWeight=\"bold\">\n              {\" \"}\n              {cls in ctx.winningBets\n                ? \"+\" + Math.floor(ctx.winningBets[cls]).toString()\n                : \"\"}{\" \"}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n    </div>\n  );\n};\n\nconst formatSideCell = (pct, cls, text, ctx, fSize = 20) => {\n  let elem = document.querySelector(\".\" + cls);\n  const newStyle: any = {\n    fontSize: 18,\n  }\n  if (elem) {\n    let style = getComputedStyle(elem);\n    if (style) {\n      let color = style.backgroundColor;\n      let rgb = color.match(/\\d+/g);\n      if (rgb && ctx.grayscale !== \"\") {\n        let gray = 0;\n        for (let i = 0; i < rgb.length; i++) {\n          gray += parseInt(rgb[i]);\n        }\n        gray /= rgb.length;\n        newStyle.backgroundColor = `rgb(${gray}, ${gray}, ${gray})`;\n      } else if (ctx.grayscale) {\n        console.log(rgb);\n      }\n    }\n  }\n  return (\n    <div\n      style={newStyle}\n      className={cls}\n      onClick={() => {\n        if (!ctx.locked) ctx.increment(cls);\n      }}\n      onContextMenu={(e) => {\n        if (e.type == \"contextmenu\") {\n          e.preventDefault();\n          if (!ctx.locked) ctx.decrement(cls);\n        }\n      }}\n    >\n      <Flex flexDirection=\"row\" minWidth=\"100%\" minHeight=\"100%\">\n        <Flex minH={pct}>\n          <Center h=\"100%\">\n            <Text textAlign=\"center\"> {text} </Text>{\" \"}\n          </Center>\n        </Flex>\n        <Flex flexDirection=\"column\" justifyContent=\"space-between\">\n          <Flex flexGrow={5}>\n            <Text fontSize={11} color=\"lime\" fontWeight=\"bold\"\n              style={{ writingMode: \"horizontal-tb\" }}\n            >\n              {\" \"}\n              {cls in ctx.winningBets\n                ? \"+\" + Math.floor(ctx.winningBets[cls]).toString()\n                : \"\"}{\" \"}\n            </Text>\n          </Flex>\n          <Flex flexGrow={1} minHeight=\"100%\">\n            <Text\n              fontSize={11}\n              color={\n                !ctx.resolved ? \"lime\" : \"red\"\n              }\n              fontWeight=\"bold\"\n              style={{ writingMode: \"horizontal-tb\" }}\n            >\n              {\" \"}\n              {cls in ctx.state ? Math.floor(ctx.state[cls]) : \"\"}{\" \"}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n    </div>\n  );\n};\n\nexport const BetSelection: React.FC = ({ ...children }) => {\n  const betTrackerCtx: any = useBetTracker();\n\n  useEffect(\n    () => console.log(\"Resolved:\", betTrackerCtx.resolved),\n    [betTrackerCtx.resolved, betTrackerCtx.winningBets]\n  );\n\n  return (\n    <div className=\"container center\">\n      {formatSideCell(\"81%\", \"Low\", \"0 to 18\", betTrackerCtx, 18)}\n      {formatSideCell(\"81%\", \"Even\", \"Even\", betTrackerCtx)}\n      {formatSideCell(\"81%\", \"Red\", \"\", betTrackerCtx)}\n      {formatSideCell(\"81%\", \"Black\", \"\", betTrackerCtx)}\n      {formatSideCell(\"81%\", \"Odd\", \"Odd\", betTrackerCtx)}\n      {formatSideCell(\"81%\", \"High\", \"19 to 36\", betTrackerCtx, 18)}\n      {formatSideCell(\"90.5%\", \"Dozen1\", \"1st 12\", betTrackerCtx, 24)}\n      {formatSideCell(\"90.5%\", \"Dozen2\", \"2nd 12\", betTrackerCtx, 24)}\n      {formatSideCell(\"90.5%\", \"Dozen3\", \"3rd 12\", betTrackerCtx, 24)}\n      {formatCell(\"Col1\", \"2 to 1\", betTrackerCtx)}\n      {formatCell(\"Col2\", \"2 to 1\", betTrackerCtx)}\n      {formatCell(\"Col3\", \"2 to 1\", betTrackerCtx)}\n      {formatCell(\"Zero\", 0, betTrackerCtx)}\n      {formatCell(\"DoubleZero\", \"00\", betTrackerCtx)}\n      {formatCell(\"R1\", 1, betTrackerCtx)}\n      {formatCell(\"B2\", 2, betTrackerCtx)}\n      {formatCell(\"R3\", 3, betTrackerCtx)}\n      {formatCell(\"B4\", 4, betTrackerCtx)}\n      {formatCell(\"R5\", 5, betTrackerCtx)}\n      {formatCell(\"B6\", 6, betTrackerCtx)}\n      {formatCell(\"R7\", 7, betTrackerCtx)}\n      {formatCell(\"B8\", 8, betTrackerCtx)}\n      {formatCell(\"R9\", 9, betTrackerCtx)}\n      {formatCell(\"B10\", 10, betTrackerCtx)}\n      {formatCell(\"B11\", 11, betTrackerCtx)}\n      {formatCell(\"R12\", 12, betTrackerCtx)}\n      {formatCell(\"B13\", 13, betTrackerCtx)}\n      {formatCell(\"R14\", 14, betTrackerCtx)}\n      {formatCell(\"B15\", 15, betTrackerCtx)}\n      {formatCell(\"R16\", 16, betTrackerCtx)}\n      {formatCell(\"B17\", 17, betTrackerCtx)}\n      {formatCell(\"R18\", 18, betTrackerCtx)}\n      {formatCell(\"R19\", 19, betTrackerCtx)}\n      {formatCell(\"B20\", 20, betTrackerCtx)}\n      {formatCell(\"R21\", 21, betTrackerCtx)}\n      {formatCell(\"B22\", 22, betTrackerCtx)}\n      {formatCell(\"R23\", 23, betTrackerCtx)}\n      {formatCell(\"B24\", 24, betTrackerCtx)}\n      {formatCell(\"R25\", 25, betTrackerCtx)}\n      {formatCell(\"B26\", 26, betTrackerCtx)}\n      {formatCell(\"R27\", 27, betTrackerCtx)}\n      {formatCell(\"B28\", 28, betTrackerCtx)}\n      {formatCell(\"B29\", 29, betTrackerCtx)}\n      {formatCell(\"R30\", 30, betTrackerCtx)}\n      {formatCell(\"B31\", 31, betTrackerCtx)}\n      {formatCell(\"R32\", 32, betTrackerCtx)}\n      {formatCell(\"B33\", 33, betTrackerCtx)}\n      {formatCell(\"R34\", 34, betTrackerCtx)}\n      {formatCell(\"B35\", 35, betTrackerCtx)}\n      {formatCell(\"R36\", 36, betTrackerCtx)}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport { RouletteWheel } from \"./components/RouletteWheel\";\nimport { BetSelection } from \"./components/BetSelection\";\nimport { Flex } from \"@chakra-ui/layout\";\nimport SpinButton from \"./components/SpinButton\";\nimport { useBetTracker } from \"./contexts\";\nimport { Button, Radio } from \"antd\";\nimport { TICK_SIZE } from \"./actions\";\n\nfunction App() {\n  const betTrackerCtx: any = useBetTracker();\n  const [value, setValue] = useState(1);\n  useEffect(() => {}, [betTrackerCtx.grayscale]);\n  return (\n    <div className=\"App\" style={{ backgroundColor: \"transparent\" }}>\n      <Header />\n      <header\n        className=\"App-header\"\n        style={{ backgroundColor: \"transparent\", minHeight: \"90vh\" }}\n      >\n        <Flex\n          flexDirection=\"row\"\n          mt=\"10px\"\n          minW=\"1130px\"\n          justifyContent=\"flex-end\"\n          ml=\"35px\"\n        >\n          <Radio.Group\n            onChange={(e) => {\n              setValue(e.target.value);\n            }}\n            value={value}\n          >\n            <Radio\n              value={1}\n              style={{ color: \"white\" }}\n              onClick={() => betTrackerCtx.updateInc(TICK_SIZE.toNumber())}\n            >\n              1 COPE \n            </Radio>\n            <Radio\n              value={2}\n              style={{ color: \"white\" }}\n              onClick={() => betTrackerCtx.updateInc(5 * TICK_SIZE.toNumber())}\n            >\n              5 COPE \n            </Radio>\n            <Radio\n              value={3}\n              style={{ color: \"white\" }}\n              onClick={() => betTrackerCtx.updateInc(10 * TICK_SIZE.toNumber())}\n            >\n              10 COPE\n            </Radio>\n            <Radio\n              value={4}\n              style={{ color: \"white\" }}\n              onClick={() => betTrackerCtx.updateInc(50 * TICK_SIZE.toNumber())}\n            >\n              50 COPE \n            </Radio>\n            <Radio\n              value={5}\n              style={{ color: \"white\" }}\n              onClick={() => betTrackerCtx.updateInc(100 * TICK_SIZE.toNumber())}\n            >\n              100 COPE \n            </Radio>\n          </Radio.Group>\n        </Flex>\n        <Flex flexDirection=\"row\" mt=\"0px\">\n          <Flex flexDirection=\"column\" ml=\"35px\" mt=\"40px\">\n            <RouletteWheel />\n          </Flex>\n          <Flex\n            flexDirection=\"column\"\n            ml=\"35px\"\n            mt=\"40px\"\n          >\n            <Flex ml=\"100px\" mt=\"20px\" width=\"300px\" height=\"630px\">\n              <BetSelection />\n            </Flex>\n            <Flex\n              ml=\"170px\"\n              mt=\"32px\"\n              width=\"300px\"\n              height=\"50px\"\n              alignItems=\"center\"\n              alignContent=\"center\"\n              style={{ filter: betTrackerCtx.grayscale }}\n            >\n              <SpinButton\n                alignContent=\"center\"\n                name=\"Reset all Bets\"\n                onClick={() => betTrackerCtx.clear()}\n                disabled={betTrackerCtx.locked}\n              />\n            </Flex>\n          </Flex>\n        </Flex>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\n\nimport {\n  AccountsProvider,\n  BetTrackerProvider,\n  ConnectionProvider,\n  WalletProvider,\n} from \"./contexts\";\n\nimport \"antd/dist/antd.css\";\nimport \"@fontsource/open-sans\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/sora\";\n\nimport theme from \"./theme/theme\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RNG, RNGProvider } from \"./actions\";\n\nimport \"./index.css\";\nimport { ConfettiProvider } from \"./components/Confetti\";\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectionProvider>\n      <WalletProvider>\n          <AccountsProvider>\n            <BetTrackerProvider>\n              <ConfettiProvider>\n                <RNGProvider>\n                  <ChakraProvider theme={theme}>\n                    <ColorModeScript\n                      initialColorMode={theme.config.initialColorMode}\n                    />\n                    <App />\n                  </ChakraProvider>\n                </RNGProvider>\n              </ConfettiProvider>\n            </BetTrackerProvider>\n          </AccountsProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","import { sleep, useLocalStorageState } from '../utils/utils';\nimport {\n  Keypair,\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { notify } from '../utils/notifications';\nimport { ExplorerLink } from '../components/ExplorerLink';\nimport { TokenInfo, TokenListProvider, ENV as ChainId } from '@solana/spl-token-registry';\nimport { WalletSigner } from './WalletContext/WalletContext';\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type ENV =\n  | 'mainnet-beta'\n  | 'mainnet-beta (Solana)'\n  | 'mainnet-beta (Serum)'\n  | 'testnet'\n  | 'devnet'\n  | 'localnet'\n  | 'lending';\n\nexport const ENDPOINTS = [\n  {\n    name: 'devnet' as ENV,\n    endpoint: \"https://api.devnet.solana.com\",\n    ChainId: ChainId.Devnet,\n  },\n  // {\n  //   name: 'mainnet-beta' as ENV,\n  //   endpoint: \"https://cope.rpcpool.com\",\n  //   ChainId: ChainId.MainnetBeta,\n  // },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: TokenInfo[];\n  tokenMap: Map<string, TokenInfo>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, 'recent'),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, TokenInfo>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState('connectionEndpoint', ENDPOINTS[0].endpoint);\n\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [endpoint]);\n\n  const env = ENDPOINTS.find((end) => end.endpoint === endpoint)?.name || ENDPOINTS[0].name;\n\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    // fetch token files\n    new TokenListProvider().resolve().then((container) => {\n      const list = container\n        .excludeByTag('nft')\n        .filterByChainId(ENDPOINTS.find((end) => end.endpoint === endpoint)?.ChainId || ChainId.MainnetBeta)\n        .getList();\n\n      const knownMints = [...list].reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map<string, TokenInfo>());\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    });\n  }, [env]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(Keypair.generate().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport const getErrorForTransaction = async (connection: Connection, txid: string) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength: any = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        await sendTransactionWithRetry(connection, wallet, instructions[0], filteredSigners[0], 'single');\n        stopPoint = 1;\n      } else {\n        stopPoint = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single'\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator\n): Promise<number> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch((reason) => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          return breakEarlyObject.i; // Return the txn we failed on by index\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return signedTxns.length;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\n\n    if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: 'Transaction failed...',\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type='transaction' />\n          </>\n        ),\n        type: 'error',\n      });\n\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    try {\n      transaction = await wallet.signTransaction(transaction);\n    } catch {\n      return false;\n    }\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n  console.log(\"About to send\");\n  try {\n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n\n    return { txid, slot };\n  } catch (error) {\n    console.error(error)\n  }\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true,\n  });\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\n\n    if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error('Timeout Error caught', err);\n    if ((err as any).timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (await simulateTransaction(connection, signedTransaction, 'single')).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(`https://explorer.solana.com/tx/${txid}?cluster=devnet`) // TODO\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}","import BN from 'bn.js';\n\nexport const TEN = new BN(10);\nexport const HALF_WAD = TEN.pow(new BN(18));\nexport const WAD = TEN.pow(new BN(18));\nexport const RAY = TEN.pow(new BN(27));\nexport const ZERO = new BN(0);\n","import { useCallback, useState } from 'react';\nimport { MintInfo } from '@solana/spl-token';\n\nimport { TokenAccount } from './../models';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { WAD, ZERO } from '../constants';\nimport { TokenInfo } from '@solana/spl-token-registry';\n\nexport type KnownTokenMap = Map<string, TokenInfo>;\n\nexport const formatPriceNumber = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    newState => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        try {\n          localStorage.setItem(key, JSON.stringify(newState));\n        } catch {\n          // ignore\n        }\n      }\n    },\n    [state, key],\n  );\n\n  return [state, setLocalStorageState];\n}\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey,\n) => {\n  const key =\n    'pda-' +\n    seeds.reduce((agg, item) => agg + item.toString('hex'), '') +\n    programId.toString();\n  let cached = localStorage.getItem(key);\n  if (cached) {\n    const value = JSON.parse(cached);\n\n    return [value.key, parseInt(value.nonce)] as [string, number];\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  try {\n    localStorage.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      }),\n    );\n  } catch {\n    // ignore\n  }\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownSymbol = map.get(mintAddress)?.symbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\nexport function getVerboseTokenName(\n  map: KnownTokenMap,\n  mint?: string | PublicKey,\n  shorten = true,\n): string {\n  const mintAddress = typeof mint === 'string' ? mint : mint?.toBase58();\n\n  if (!mintAddress) {\n    return 'N/A';\n  }\n\n  const knownName = map.get(mintAddress)?.name;\n  if (knownName) {\n    return knownName;\n  }\n\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\n}\n\nexport function getTokenByName(tokenMap: KnownTokenMap, name: string) {\n  let token: TokenInfo | null = null;\n  for (const val of tokenMap.values()) {\n    if (val.symbol === name) {\n      token = val;\n      break;\n    }\n  }\n  return token;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress?: string | PublicKey,\n): string | undefined {\n  const address =\n    typeof mintAddress === 'string' ? mintAddress : mintAddress?.toBase58();\n  if (!address) {\n    return;\n  }\n\n  return map.get(address)?.logoURI;\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set(['USDC', 'wUSDC', 'USDT']);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size)),\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function toLamports(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  return Math.floor(amount * precision);\n}\n\nexport function wadToLamports(amount?: BN): BN {\n  return amount?.div(WAD) || ZERO;\n}\n\nexport function fromLamports(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount = Math.floor(\n    typeof account === 'number'\n      ? account\n      : BN.isBN(account)\n      ? account.toNumber()\n      : account.info.amount.toNumber(),\n  );\n\n  const precision = Math.pow(10, mint?.decimals || 9);\n  return (amount / precision) * rate;\n}\n\nexport const tryParseKey = (key: string): PublicKey | null => {\n  try {\n    return new PublicKey(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nvar SI_SYMBOL = ['', 'k', 'M', 'G', 'T', 'P', 'E'];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nexport const formatAmount = (\n  val: number,\n  precision: number = 2,\n  abbr: boolean = true,\n) => (abbr ? abbreviateNumber(val, precision) : val.toFixed(precision));\n\nexport function formatTokenAmount(\n  account?: TokenAccount | number | BN,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = '',\n  suffix = '',\n  precision = 2,\n  abbr = false,\n): string {\n  if (!account) {\n    return '';\n  }\n\n  return `${[prefix]}${formatAmount(\n    fromLamports(account, mint, rate),\n    precision,\n    abbr,\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n};\n\nexport const formatPct = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0,\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === 'number' ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  let result = (amount / precision) * rate;\n\n  return result;\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}